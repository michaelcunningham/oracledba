.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "doc::Ora2Pg 3"
.TH doc::Ora2Pg 3 "2016-04-21" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Ora2Pg \- Oracle to PostgreSQL database schema converter
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Ora2Pg is a free tool used to migrate an Oracle database to a
PostgreSQL compatible schema. It connects your Oracle database, scan it
automatically and extracts its structure or data, it then generates \s-1SQL\s0
scripts that you can load into your PostgreSQL database.
.PP
Ora2Pg can be used from reverse engineering Oracle database to huge enterprise
database migration or simply to replicate some Oracle data into a PostgreSQL
database. It is really easy to used and doesn't need any Oracle database
knowledge than providing the parameters needed to connect to the Oracle
database.
.SH "FEATURES"
.IX Header "FEATURES"
Ora2Pg consist of a Perl script (ora2pg) and a Perl module (Ora2Pg.pm), the
only thing you have to modify is the configuration file ora2pg.conf by setting
the \s-1DSN\s0 to the Oracle database and optionaly the name of a schema. Once that's
done you just have to set the type of export you want: \s-1TABLE\s0 with constraints,
\&\s-1VIEW, MVIEW, TABLESPACE, SEQUENCE, INDEXES, TRIGGER, GRANT, FUNCTION, PROCEDURE,
PACKAGE, PARTITION, TYPE, INSERT\s0 or \s-1COPY, FDW, QUERY, KETTLE, SYNONYM.\s0
.PP
By default Ora2Pg exports to a file that you can load into PostgreSQL with the
psql client, but you can also import directly into a PostgreSQL database by
setting its \s-1DSN\s0 into the configuration file. With all configuration options of
ora2pg.conf you have full control of what should be exported and how.
.PP
Features included:
.PP
.Vb 10
\&        \- Export full database schema (tables, views, sequences, indexes), with
\&          unique, primary, foreign key and check constraints.
\&        \- Export grants/privileges for users and groups.
\&        \- Export range/list partitions andi sub partitions.
\&        \- Export a table selection (by specifying the table names).
\&        \- Export Oracle schema to a PostgreSQL 8.4+ schema.
\&        \- Export predefined functions, triggers, procedures, packages and
\&          package bodies.
\&        \- Export full data or following a WHERE clause.
\&        \- Full support of Oracle BLOB object as PG BYTEA.
\&        \- Export Oracle views as PG tables.
\&        \- Export Oracle user defined types.
\&        \- Provide some basic automatic conversion of PLSQL code to PLPGSQL.
\&        \- Works on any plateform.
\&        \- Export Oracle tables as foreign data wrapper tables.
\&        \- Export materialized view.
\&        \- Show a detailled report of an Oracle database content.
\&        \- Migration cost assessment of an Oracle database.
\&        \- Migration difficulty level assessment of an Oracle database.
\&        \- Migration cost assessment of PL/SQL code from a file.
\&        \- Migration cost assessment of Oracle SQL queries stored in a file.
\&        \- Generate XML ktr files to be used with Penthalo Data Integrator (Kettle)
\&        \- Export Oracle locator and spatial geometries into PostGis.
\&        \- Export DBLINK as Oracle FDW.
\&        \- Export SYNONYMS as views.
\&        \- Export DIRECTORY as external table or directory for external_file extension.
\&        \- Full MySQL export just like Oracle database.
\&        \- Dispatch a list of SQL orders over multiple PostgreSQL connections
\&        \- Perform a diff between Oracle and PostgreSQL database for test purpose.
.Ve
.PP
Ora2Pg do its best to automatically convert your Oracle database to PostgreSQL
but there's still manual works to do. The Oracle specific \s-1PL/SQL\s0 code generated
for functions, procedures, packages and triggers has to be reviewed to match
the PostgreSQL syntax. You will find some useful recommandations on porting
Oracle \s-1PL/SQL\s0 code to PostgreSQL \s-1PL/PGSQL\s0 at \*(L"Converting from other Databases
to PostgreSQL\*(R", section: Oracle (http://wiki.postgresql.org/wiki/Main_Page).
.PP
See http://ora2pg.darold.net/report.html for a \s-1HTML\s0 sample of an Oracle database
migration report.
.SH "INSTALLATION"
.IX Header "INSTALLATION"
All Perl modules can always be found at \s-1CPAN \s0(http://search.cpan.org/). Just
type the full name of the module (ex: DBD::Oracle) into the search input box,
it will brings you the page for download.
.PP
Releases of Ora2Pg stay at \s-1SF\s0.net (https://sourceforge.net/projects/ora2pg/).
.PP
Under Windows you should install Strawberry Perl (http://strawberryperl.com/)
and the OSes corresponding Oracle clients. It seems that compiling DBD::Oracle
from \s-1CPAN\s0 on Windows can be a struggle and there be little documentation on that
(mostly outdated and not working). Installing the free version of ActiveState
Perl (http://www.activestate.com/activeperl) could help as they seems to have
an already packaged DBD::Oracle easy to install.
.SS "Requirement"
.IX Subsection "Requirement"
You need a modern Perl distribution (perl 5.10 and more), the \s-1DBI \s0> 1.614 and
DBD::Oracle Perl modules to be installed. These are used to connect to the
Oracle database. To install DBD::Oracle and have it working you need to have
the Oracle client libraries installed and the \s-1ORACLE_HOME\s0 environment variable
must be defined.
.PP
If you plan to export a MySQL database you need to install the Perl module
DBD::mysql which require that the mysql client libraries are installed.
.PP
On some Perl distribution you may need to install the Time::HiRes Perl module.
.SS "Optional"
.IX Subsection "Optional"
By default Ora2Pg dumps export to flat files, to load them into your PostgreSQL
database you need the PostgreSQL client (psql). If you don't have it on the
host running Ora2Pg you can always transfer these files to a host with the psql
client installed. If you prefer to load export 'on the fly', the perl module
DBD::Pg is required.
.PP
Ora2Pg allow to dump all output int a compressed gzip file, to do that you need
the Compress::Zlib Perl module or if you prefer using bzip2 compression, the
program bzip2 must be available in your \s-1PATH.\s0
.SS "Installing Ora2Pg"
.IX Subsection "Installing Ora2Pg"
Like any other Perl Module Ora2Pg can be installed with the following commands:
.PP
.Vb 4
\&        tar xzf ora2pg\-10.x.tar.gz
\&        cd ora2pg\-10.x/
\&        perl Makefile.PL
\&        make && make install
.Ve
.PP
This will install Ora2Pg.pm into your site Perl repository, ora2pg into
/usr/local/bin/ and ora2pg.conf into /etc/ora2pg/.
.PP
On Windows(tm) OSes you may use instead:
.PP
.Vb 2
\&        perl Makefile.PL
\&        dmake && dmake install
.Ve
.PP
This will install scripts and libraries into your Perl site installation directory
and the ora2pg.conf file as well as all documentation files into C:\eora2pg\e
.SS "Packaging"
.IX Subsection "Packaging"
If you want to build binary package for your preferred Linux distribution take a
look at the packaging/ directory of the source tarball. There's everything to
build \s-1RPM,\s0 Slackware and Debian packages. See \s-1README\s0 file in that directory.
.SS "Installing DBD::Oracle"
.IX Subsection "Installing DBD::Oracle"
Ora2Pg need perl module DBD::Oracle for connectivity to an Oracle database from
perl \s-1DBI.\s0 To get DBD::Oracle get it from \s-1CPAN\s0 a perl module repository.
.PP
After setting \s-1ORACLE_HOME\s0 and \s-1LD_LIBRARY_PATH\s0 environment variables as root
user, install DBD::Oracle. Proceed as follow:
.PP
.Vb 3
\&        export LD_LIBRARY_PATH=/usr/lib/oracle/11.2/client64/lib
\&        export ORACLE_HOME=/usr/lib/oracle/11.2/client64/
\&        perl \-MCPAN \-e \*(Aqinstall DBD::Oracle\*(Aq
.Ve
.PP
If you are running for the first time it will ask so many questions which you
can keep defaults by pressing \s-1ENTER\s0 key, but you need to give one appropriate
i.e., mirror site for \s-1CPAN\s0 to download the modules. Or install through \s-1CPAN\s0
manually if the above don't works:
.PP
.Vb 9
\&        #perl \-MCPAN \-e shell
\&        cpan> get DBD::Oracle
\&        cpan> quit
\&        cd ~/.cpan/build/DBD\-Oracle*
\&        export LD_LIBRARY_PATH=/usr/lib/oracle/11.2/client64/lib
\&        export ORACLE_HOME=/usr/lib/oracle/11.2/client64/
\&        perl Makefile.PL
\&        make
\&        make install
.Ve
.PP
Installing DBD::Oracle require that the three Oracle packages: instant-client,
\&\s-1SDK\s0 and SQLplus are installed as well as the libaio1 library.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
Ora2Pg configuration can be as simple as choose the Oracle database to export
and choose the export type. This can be done in the minute.
.PP
By reading this documentation you will also be able to:
.PP
.Vb 6
\&        \- Select only certain tables and/or column for export.
\&        \- Rename some tables and/or column during export.
\&        \- Select data to export following a WHERE clause per table.
\&        \- Delay database constraints during data loading.
\&        \- Compress exported data to save disk space.
\&        \- and much more.
.Ve
.PP
The full control of the Oracle database migration is taken though a single
configuration file named ora2pg.conf. The format of this file consist in a
directive name in upper case followed by tab character and a value.
Comments are lines beginning with a #.
.PP
There's no specific order to place the configuration directives, they are
set at the time they are read in the configuration file.
.PP
For configuration directives that just take a single value, you can use them
multiple time in the configuration file but only the last occurence found
in the file will be used. For configuration directives that allow a list
of value, you can use it multiple time, the values will be appended to the
list. If you use the \s-1IMPORT\s0 directive to load a custom configuration file,
directives defined in this file will be stores from the place the \s-1IMPORT\s0
directive is found, so it is better to put it at the end of the configuration
file.
.PP
Values set in command line options will override values from the configuration
file.
.SS "Ora2Pg usage"
.IX Subsection "Ora2Pg usage"
By default Ora2Pg will look for /etc/ora2pg/ora2pg.conf configuration file, if
the file exist you can simply execute:
.PP
.Vb 1
\&        /usr/local/bin/ora2pg
.Ve
.PP
or under Windows(tm) run ora2pg.bat file, located in your perl bin directory.
Windows(tm) users may also find a template configuration file in C:\eora2pg
.PP
If you want to call another configuration file, just give the path as command
line argument:
.PP
.Vb 1
\&        /usr/local/bin/ora2pg \-c /etc/ora2pg/new_ora2pg.conf
.Ve
.PP
Here are all command line parameters available when using ora2pg:
.PP
Usage: ora2pg [\-dhpqv \-\-estimate_cost \-\-dump_as_html] [\-\-option value]
.PP
.Vb 10
\&    \-a | \-\-allow str  : coma separated list of objects to allow from export.
\&                        Can be used with SHOW_COLUMN too.
\&    \-b | \-\-basedir dir: Used to set the default output directory, where files
\&                        resulting from exports will be stored.
\&    \-c | \-\-conf file  : Used to set an alternate configuration file than the
\&                        default /etc/ora2pg/ora2pg.conf.
\&    \-d | \-\-debug      : Enable verbose output.
\&    \-e | \-\-exclude str: coma separated list of objects to exclude from export.
\&                        Can be used with SHOW_COLUMN too.
\&    \-h | \-\-help       : Print this short help.
\&    \-i | \-\-input file : File containing Oracle PL/SQL code to convert with
\&                        no Oracle database connection initiated.
\&    \-j | \-\-jobs num   : number of parallel process to send data to PostgreSQL.
\&    \-J | \-\-copies num : number of parallel connection to extract data from Oracle.
\&    \-l | \-\-log file   : Used to set a log file. Default is stdout.
\&    \-L | \-\-limit num  : number of tuples extracted from Oracle and stored in
\&                        memory before writing, default: 10000.
\&    \-m | \-\-mysql      : Export a MySQL database instead of an Oracle schema.
\&    \-n | \-\-namespace schema : Used to set the Oracle schema to extract from.
\&    \-o | \-\-out file   : Used to set the path to the output file where SQL will
\&                        be written. Default: output.sql in running directory.
\&    \-p | \-\-plsql      : Enable PLSQL to PLPSQL code conversion.
\&    \-P | \-\-parallel num: Number of parallel tables to extract at the same time.
\&    \-q | \-\-quiet      : disable progress bar.
\&    \-s | \-\-source DSN : Allow to set the Oracle DBI datasource.
\&    \-t | \-\-type export: Used to set the export type. It will override the one
\&                        given in the configuration file (TYPE).
\&    \-T | \-\-temp_dir DIR: use it to set a distinct temporary directory when two
\&                         or more ora2pg are run in parallel.
\&    \-u | \-\-user name  : Used to set the Oracle database connection user.
\&                        ORA2PG_USER environment variable can be used instead.
\&    \-v | \-\-version    : Show Ora2Pg Version and exit.
\&    \-w | \-\-password pwd : Used to set the password of the Oracle database user.
\&                        ORA2PG_PASSWD environment variable can be used instead.
\&    \-\-forceowner: if set to 1 force ora2pg to set tables and sequences owner
\&                  like in Oracle database. If the value is set to a username this
\&                  one will be used as the objects owner. By default it\*(Aqs the user
\&                  used to connect to the Pg database that will be the owner.
\&    \-\-nls_lang code: use this to set the Oracle NLS_LANG client encoding.
\&    \-\-client_encoding code: Use this to set the PostgreSQL client encoding.
\&    \-\-view_as_table str: coma separated list of view to export as table.
\&    \-\-estimate_cost   : activate the migration cost evalution with SHOW_REPORT
\&    \-\-cost_unit_value minutes: number of minutes for a cost evalution unit.
\&                  default: 5 minutes, correspond to a migration conducted by a
\&                  PostgreSQL expert. Set it to 10 if this is your first migration.
\&   \-\-dump_as_html     : force ora2pg to dump report in HTML, used only with
\&                        SHOW_REPORT. Default is to dump report as simple text.
\&   \-\-dump_as_csv      : as above but force ora2pg to dump report in CSV.
\&   \-\-dump_as_sheet    : report migration assessment one CSV line per database.
\&   \-\-init_project NAME: initialise a typical ora2pg project tree. Top directory
\&                        will be created under project base dir.
\&   \-\-project_base DIR : define the base dir for ora2pg project trees. Default
\&                        is current directory.
\&   \-\-print_header     : to be used with \-\-dump_as_sheet to print the CSV header
\&                        especially for the first run of ora2pg.
\&   \-\-human_days_limit num : set the number human\-days limit where the migration
\&                        assessment level switch from B to C. Default is set to
\&                        5 human\-days.
\&   \-\-audit_user LIST  : comma separated list of username to filter queries in
\&                        the DBA_AUDIT_TRAIL table. Used only with SHOW_REPORT
\&                        and QUERY export type.
\&   \-\-pg_dsn DSN       : set the datasource to PostgreSQL for direct import.
\&   \-\-pg_user name     : set the PostgreSQL user to use.
\&   \-\-pg_pwd password  : set the PostgreSQL password to use.
\&   \-\-count_rows       : force ora2pg to perform a real row count in TEST action.
.Ve
.PP
See full documentation at http://ora2pg.darold.net/ for more help or see
manpage with 'man ora2pg'.
.PP
ora2pg will return 0 on success, 1 on error. It will return 2 when a child
process have been interrupted and you've got the warning message:
    \*(L"\s-1WARNING:\s0 an error occurs during data export. Please check what's happen.\*(R"
Most of the time this is an \s-1OOM\s0 issue, you might first reduce \s-1DATA_LIMIT\s0 value.
.PP
For developpers, it is possible to add your own custom option(s) in the Perl
script ora2pg as any configuration directive from ora2pg.conf can be passed
in lower case to the new Ora2Pg object instance. See ora2pg code on how to
add your own option.
.SS "Generate a migration template"
.IX Subsection "Generate a migration template"
The two options \-\-project_base and \-\-init_project when used indicate to ora2pg
that he has to create a project template with a work tree, a configuration
file and a script to export all objects from the Oracle database. Here a sample
of the command usage:
.PP
.Vb 1
\&    ora2pg \-\-project_base /home/git/tmp \-\-init_project test_project
\&
\&        Creating project test_project.
\&        /home/git/tmp/test_project/
\&                schema/
\&                        fdws/
\&                        functions/
\&                        grants/
\&                        kettles/
\&                        mviews/
\&                        packages/
\&                        partitions/
\&                        procedures/
\&                        sequences/
\&                        tables/
\&                        tablespaces/
\&                        triggers/
\&                        types/
\&                        views/
\&                sources/
\&                        functions/
\&                        mviews/
\&                        packages/
\&                        partitions/
\&                        procedures/
\&                        triggers/
\&                        types/
\&                        views/
\&                data/
\&                config/
\&                        ora2pg.conf
\&                reports/
\&
\&        Generating generic configuration file
\&        Creating script export_schema.sh to automate all exports.
.Ve
.PP
It create a generic config file where you just have to define the Oracle
database connection and a shell script called export_schema.sh. The sources/
directory will contains the Oracle code, the schema/ will contains the code
ported to PostgreSQL. The reports/ directory will contains the html reports
with the migration cost assessment.
.PP
If you want to use your own default config file, use the \-c option to give
the path to that file. Rename it with .dist suffix if you want ora2pg to
apply the generic configuration values otherwise, the configuration file
will be copied untouched.
.SS "Oracle database connection"
.IX Subsection "Oracle database connection"
There's 5 configuration directives to control the access to the Oracle database.
.IP "\s-1ORACLE_HOME\s0" 4
.IX Item "ORACLE_HOME"
Used to set \s-1ORACLE_HOME\s0 environment variable to the Oracle libraries required
by the DBD::Oracle Perl module.
.IP "\s-1ORACLE_DSN\s0" 4
.IX Item "ORACLE_DSN"
This directive is used to set the data source name in the form standard \s-1DBI DSN.\s0
For example:
.Sp
.Vb 1
\&        dbi:Oracle:host=oradb_host.myhost.com;sid=DB_SID
.Ve
.Sp
or
.Sp
.Vb 1
\&        dbi:Oracle:DB_SID
.Ve
.Sp
for the second notation the \s-1SID\s0 should be declared in the well known file
\&\f(CW$ORACLE_HOME\fR/network/admin/tnsnames.ora or in the path given to the \s-1TNS_ADMIN\s0
environment variable.
.IP "\s-1ORACLE_USER\s0 et \s-1ORACLE_PWD\s0" 4
.IX Item "ORACLE_USER et ORACLE_PWD"
These two directives are used to define the user and password for the Oracle
database connection. Note that if you can it is better to login as Oracle super
admin to avoid grants problem during the database scan and be sure that nothing
is missing.
.IP "\s-1USER_GRANTS\s0" 4
.IX Item "USER_GRANTS"
Set this directive to 1 if you connect the Oracle database as simple user and
do not have enough grants to extract things from the \s-1DBA_...\s0 tables. It will
use tables \s-1ALL_...\s0 instead.
.Sp
Warning: if you use export type \s-1GRANT,\s0 you must set this configuration option
to 0 or it will not works.
.IP "\s-1TRANSACTION\s0" 4
.IX Item "TRANSACTION"
This directive may be used if you want to change the default isolation level of
the data export transaction. Default is now to set the level to a serializable
transaction to ensure data consistency. The allowed values for this directive
are:
.Sp
.Vb 4
\&        readonly: \*(AqSET TRANSACTION READ ONLY\*(Aq,
\&        readwrite: \*(AqSET TRANSACTION READ WRITE\*(Aq,
\&        serializable: \*(AqSET TRANSACTION ISOLATION LEVEL SERIALIZABLE\*(Aq
\&        committed: \*(AqSET TRANSACTION ISOLATION LEVEL READ COMMITTED\*(Aq,
.Ve
.Sp
Releases before 6.2 used to set the isolation level to \s-1READ ONLY\s0 transaction
but in some case this was breaking data consistency so now default is set to
\&\s-1SERIALIZABLE.\s0
.IP "\s-1INPUT_FILE\s0" 4
.IX Item "INPUT_FILE"
This directive did not control the Oracle database connection or unless it
purely disable the use of any Oracle database by accepting a file as argument.
Set this directive to a file containing \s-1PL/SQL\s0 Oracle Code like function,
procedure or full package body to prevent Ora2Pg from connecting to an
Oracle database and just apply his convertion tool to the content of the
file. This can be used with the most of export types: \s-1TABLE, TRIGGER, PROCEDURE,
VIEW, FUNCTION\s0 or \s-1PACKAGE,\s0 etc.
.IP "\s-1ORA_INITIAL_COMMAND\s0" 4
.IX Item "ORA_INITIAL_COMMAND"
This directive can be used to send an initial command to Oracle, just after
the connection. For example to unlock a policy before reading objects.
.SS "Data encryption with Oracle server"
.IX Subsection "Data encryption with Oracle server"
If your Oracle Client config file already includes the encryption method,
then DBD:Oracle uses those settings to encrypt the connection while you
extract the data. For example if you have configured the Oracle Client
config file (sqlnet.or or .sqlnet) with the following information:
.PP
.Vb 4
\&        # Configure encryption of connections to Oracle
\&        SQLNET.ENCRYPTION_CLIENT = required
\&        SQLNET.ENCRYPTION_TYPES_CLIENT = (AES256, RC4_256)
\&        SQLNET.CRYPTO_SEED = \*(Aqshould be 10\-70 random characters\*(Aq
.Ve
.PP
Any tool that uses the Oracle client to talk to the database will be
encrypted if you setup a session encryption like above.
.PP
For example, Perl's \s-1DBI\s0 uses DBD-Oracle, which uses the Oracle client
for actually handling database communication. If the installation of
Oracle client used by Perl is setup to request encrypted connections,
then your Perl connection to an Oracle database will also be encrypted.
.PP
Full details at https://kb.berkeley.edu/jivekb/entry.jspa?externalID=1005
.SS "Testing connection"
.IX Subsection "Testing connection"
Once you have set the Oracle database \s-1DSN\s0 you can execute ora2pg to see if
it works:
.PP
.Vb 1
\&        ora2pg \-t SHOW_VERSION \-c config/ora2pg.conf
.Ve
.PP
will show Oracle database server version. Take some time here to test your
installation as most of the problem take place here, the other configuration
steps are more technical.
.SS "Trouble shooting"
.IX Subsection "Trouble shooting"
If the output.sql file has not exported anything else than the Pg transaction
header and footer there's two possible reasons. The perl script ora2pg dump
an ORA-XXX error, that mean that you \s-1DSN\s0 or login information are wrong, check
the error and your settings and try again. The perl script says nothing and the
output file is empty: the user has not enough right to extract something from
the database. Try to connect Oracle as super user or take a look at directive
\&\s-1USER_GRANTS\s0 above and at next section, especiallly the \s-1SCHEMA\s0 directive.
.IP "\s-1LOGFILE\s0" 4
.IX Item "LOGFILE"
By default all message are sent to the standard output. If you give a file path to that directive, all output will be appended to this file.
.SS "Oracle schema to export"
.IX Subsection "Oracle schema to export"
The Oracle database export can be limited to a specific Schema or Namespace,
this can be mandatory following the database connection user.
.IP "\s-1SCHEMA\s0" 4
.IX Item "SCHEMA"
This directive is used to set the schema name to use during export.
For example:
.Sp
.Vb 1
\&        SCHEMA  APPS
.Ve
.Sp
will extract objects associated to the \s-1APPS\s0 schema.
.Sp
When no schema name is provided and \s-1EXPORT_SCHEMA\s0 is enabled, Ora2Pg
will export all objects from all schema of the Oracle instance with
their names prefixed with the scham name.
.IP "\s-1EXPORT_SCHEMA\s0" 4
.IX Item "EXPORT_SCHEMA"
By default the Oracle schema is not exported into the PostgreSQL database and
all objects are created under the default Pg namespace. If you want to also
export this schema and create all objects under this namespace, set the
\&\s-1EXPORT_SCHEMA\s0 directive to 1. This will set the schema search_path at top of
export \s-1SQL\s0 file to the schema name set in the \s-1SCHEMA\s0 directive with the default
pg_catalog schema. If you want to change this path, use the directive \s-1PG_SCHEMA.\s0
.IP "\s-1CREATE_SCHEMA\s0" 4
.IX Item "CREATE_SCHEMA"
Enable/disable the \s-1CREATE SCHEMA SQL\s0 order at starting of the output file.
It is enable by default and concern on \s-1TABLE\s0 export type.
.IP "\s-1COMPILE_SCHEMA\s0" 4
.IX Item "COMPILE_SCHEMA"
By default Ora2Pg will only export valid \s-1PL/SQL\s0 code. You can force Oracle to
compile again the invalidated code to get a chance to have it obtain the valid
status and then be able to export it.
.Sp
Enable this directive to force Oracle to compile schema before exporting code.
This will ask to Oracle to validate the \s-1PL/SQL\s0 that could have been invalidate
after a export/import for example. If you set the value to 1 it will exec:
\&\s-1DBMS_UTILITY\s0.compile_schema(schema => sys_context('\s-1USERENV\s0', '\s-1SESSION_USER\s0'));
but if you provide the name of a particular schema it will use the following
command: \s-1DBMS_UTILITY\s0.compile_schema(schema => 'schemaname');
The '\s-1VALID\s0' or '\s-1INVALID\s0' status applies to functions, procedures, packages and
user defined types.
.IP "\s-1EXPORT_INVALID\s0" 4
.IX Item "EXPORT_INVALID"
If the above configuration directive is not enough to validate your \s-1PL/SQL\s0 code
enable this configuration directive to allow export of all \s-1PL/SQL\s0 code even if
it is marked as invalid. The '\s-1VALID\s0' or '\s-1INVALID\s0' status applies to functions,
procedures, packages and user defined types.
.IP "\s-1PG_SCHEMA\s0" 4
.IX Item "PG_SCHEMA"
Allow you to defined/force the PostgreSQL schema to use. The value can be a
comma delimited list of schema name. By default if you set \s-1EXPORT_SCHEMA\s0 to 1,
the PostgreSQL schema search_path will be set to the schema name set as value of
the \s-1SCHEMA\s0 directive plus the default pg_catalog schema as follow:
.Sp
.Vb 1
\&        SET search_path = $SCHEMA, pg_catalog;
.Ve
.Sp
If you set \s-1PG_SCHEMA\s0 to something like \*(L"user_schema, public\*(R" for example the
search path will be set like this:
.Sp
.Vb 1
\&        SET search_path = user_schema, public;
.Ve
.Sp
This will force to use an other schema than the one from Oracle schema and set
in the \s-1SCHEMA\s0 directive.
.Sp
You can also set the default search_path for the connected PostgreSQL user by
using:
	\s-1ALTER ROLE\s0 username \s-1SET\s0 search_path \s-1TO\s0 user_schema, public, pg_catalog;
.IP "\s-1SYSUSERS\s0" 4
.IX Item "SYSUSERS"
Without explicit schema, Ora2Pg will export all objects that not belongs to
system schema or role:
.Sp
.Vb 9
\&        CTXSYS,DBSNMP,EXFSYS,LBACSYS,MDSYS,MGMT_VIEW,OLAPSYS,ORDDATA,OWBSYS,
\&        ORDPLUGINS,ORDSYS,OUTLN,SI_INFORMTN_SCHEMA,SYS,SYSMAN,SYSTEM,WK_TEST,
\&        WKSYS,WKPROXY,WMSYS,XDB,APEX_PUBLIC_USER,DIP,FLOWS_020100,FLOWS_030000,
\&        FLOWS_040100,FLOWS_FILES,MDDATA,ORACLE_OCM,SPATIAL_CSW_ADMIN_USR,
\&        SPATIAL_WFS_ADMIN_USR,XS$NULL,PERFSTAT,SQLTXPLAIN,DMSYS,TSMSYS,WKSYS,
\&        APEX_040200,DVSYS,OJVMSYS,GSMADMIN_INTERNAL,APPQOSSYS,MGMT_VIEW,
\&        ODM,ODM_MTR,TRACESRV,MTMSYS,OWBSYS_AUDIT,WEBSYS,WK_PROXY,
\&        OSE$HTTP$ADMIN,AURORA$JIS$UTILITY$,AURORA$ORB$UNAUTHENTICATED,
\&        DBMS_PRIVILEGE_CAPTURE
.Ve
.Sp
Following your Oracle installation you may have several other system role
defined. To append these users to the schema exclusion list, just set the
\&\s-1SYSUSERS\s0 configuration directive to a comma-separated list of system user to
exclude. For example:
.Sp
.Vb 1
\&        SYSUSERS        INTERNAL,SYSDBA,BI,HR,IX,OE,PM,SH
.Ve
.Sp
will add users \s-1INTERNAL\s0 and \s-1SYSDBA\s0 to the schema exclusion list.
.IP "\s-1FORCE_OWNER\s0" 4
.IX Item "FORCE_OWNER"
By default the owner of the database objects is the one you're using to connect
to PostgreSQL using the psql command. If you use an other user (postgres for exemple)
you can force Ora2Pg to set the object owner to be the one used in the Oracle database
by setting the directive to 1, or to a completely different username by setting the
directive value to that username.
.IP "\s-1USE_TABLESPACE\s0" 4
.IX Item "USE_TABLESPACE"
When enabled this directive force ora2pg to export all tables, indexes constraint and
indexes using the tablespace name defined in Oracle database. This works only with
tablespace that are not \s-1TEMP, USERS\s0 and \s-1SYSTEM.\s0
.IP "\s-1WITH_OID\s0" 4
.IX Item "WITH_OID"
Activating this directive will force Ora2Pg to add \s-1WITH \s0(\s-1OIDS\s0) when creating
tables or views as tables. Default is same as PostgreSQL, disabled.
.SS "Export type"
.IX Subsection "Export type"
The export action is perform following a single configuration directive '\s-1TYPE\s0',
some other add more control on what should be really exported.
.IP "\s-1TYPE\s0" 4
.IX Item "TYPE"
Here are the different values of the \s-1TYPE\s0 directive, default is \s-1TABLE:\s0
.Sp
.Vb 10
\&        \- TABLE: Extract all tables with indexes, primary keys, unique keys,
\&          foreign keys and check constraints.
\&        \- VIEW: Extract only views.
\&        \- GRANT: Extract roles converted to Pg groups, users and grants on all
\&          objects.
\&        \- SEQUENCE: Extract all sequence and their last position.
\&        \- TABLESPACE: Extract storage spaces for tables and indexes (Pg >= v8).
\&        \- TRIGGER: Extract triggers defined following actions.
\&        \- FUNCTION: Extract functions.
\&        \- PROCEDURE: Extract procedures.
\&        \- PACKAGE: Extract packages and package bodies.
\&        \- INSERT: Extract data as INSERT statement.
\&        \- COPY: Extract data as COPY statement.
\&        \- PARTITION: Extract range and list Oracle partitions with subpartitions.
\&        \- TYPE: Extract user defined Oracle type.
\&        \- FDW: Export Oracle tables as foreign table for oracle_fdw.
\&        \- MVIEW: Export materialized view.
\&        \- QUERY: Try to automatically convert Oracle SQL queries.
\&        \- KETTLE: Generate XML ktr template files to be used by Kettle.
\&        \- DBLINK: Generate oracle foreign data wrapper server to use as dblink.
\&        \- SYNONYM: Export Oracle\*(Aqs synonyms as views on other schema\*(Aqs objects.
\&        \- DIRECTORY: Export Oracle\*(Aqs directories as external_file extension objects.
\&        \- LOAD: Dispatch a list of queries over multiple PostgreSQl connections.
\&        \- TEST: perform a diff between Oracle and PostgreSQL database.
.Ve
.Sp
Only one type of export can be perform at the same time so the \s-1TYPE\s0 directive
must be unique. If you have more than one only the last found in the file will
be registered.
.Sp
Some export type can not or should not be load directly into the PostgreSQL
database and still require little manual editing. This is the case for \s-1GRANT,
TABLESPACE, TRIGGER, FUNCTION, PROCEDURE, TYPE, QUERY\s0 and \s-1PACKAGE\s0 export types
especially if you have \s-1PLSQL\s0 code or Oracle specific \s-1SQL\s0 in it.
.Sp
For \s-1TABLESPACE\s0 you must ensure that file path exist on the system and for
\&\s-1SYNONYM\s0 you may ensure that the object's owners and schemas correspond to
the new PostgreSQL database design.
.Sp
Note that you can chained multiple export by giving to the \s-1TYPE\s0 directive a
comma-separated list of export type.
.Sp
The \s-1PARTITION\s0 export is a work in progress as table partition support is not
yet implemented into PostgreSQL. Ora2Pg will convert Oracle partition using
table inheritence, trigger and function workaround. See document at Pg site:
http://www.postgresql.org/docs/current/interactive/ddl\-partitioning.html
This new feature in Ora2Pg has not been widly tested so feel free to report
any bug and patch.
.Sp
The \s-1TYPE\s0 export allow export of user defined Oracle type. If you don't use the
\&\-\-plsql command line parameter it simply dump Oracle user type asis else Ora2Pg
will try to convert it to PostgreSQL syntax.
.Sp
The \s-1KETTLE\s0 export type requires that the Oracle and PostgreSQL \s-1DNS\s0 are defined.
.Sp
Since Ora2Pg v8.1 there's three new export types:
.Sp
.Vb 7
\&        SHOW_VERSION : display Oracle version
\&        SHOW_SCHEMA  : display the list of schema available in the database.
\&        SHOW_TABLE   : display the list of tables available.
\&        SHOW_COLUMN  : display the list of tables columns available and the
\&                Ora2PG conversion type from Oracle to PostgreSQL that will be
\&                applied. It will also warn you if there\*(Aqs PostgreSQL reserved
\&                words in Oracle object names.
.Ve
.Sp
Here is an example of the \s-1SHOW_COLUMN\s0 output:
.Sp
.Vb 11
\&        [2] TABLE CURRENT_SCHEMA (1 rows) (Warning: \*(AqCURRENT_SCHEMA\*(Aq is a reserved word in PostgreSQL)
\&                CONSTRAINT : NUMBER(22) => bigint (Warning: \*(AqCONSTRAINT\*(Aq is a reserved word in PostgreSQL)
\&                FREEZE : VARCHAR2(25) => varchar(25) (Warning: \*(AqFREEZE\*(Aq is a reserved word in PostgreSQL)
\&        ...
\&        [6] TABLE LOCATIONS (23 rows)
\&                LOCATION_ID : NUMBER(4) => smallint
\&                STREET_ADDRESS : VARCHAR2(40) => varchar(40)
\&                POSTAL_CODE : VARCHAR2(12) => varchar(12)
\&                CITY : VARCHAR2(30) => varchar(30)
\&                STATE_PROVINCE : VARCHAR2(25) => varchar(25)
\&                COUNTRY_ID : CHAR(2) => char(2)
.Ve
.Sp
Those extraction keyword are use to only display the requested information and
exit. This allow you to quickly know on what you are going to work.
.Sp
The \s-1SHOW_COLUMN\s0 allow an other ora2pg command line option: '\-\-allow relname'
or '\-a relname' to limit the displayed information to the given table.
.Sp
The \s-1SHOW_ENCODING\s0 export type will display the \s-1NLS_LANG\s0 and \s-1CLIENT_ENCODING\s0
values that Ora2Pg will used and the real encoding of the Oracle database with
the corresponding client encoding that could be used with PostgreSQL
.Sp
Since release v8.12, Ora2Pg allow you to export your Oracle Table definition to
be use with the oracle_fdw foreign data wrapper. By using type \s-1FDW\s0 your Oracle
tables will be exported as follow:
.Sp
.Vb 5
\&        CREATE FOREIGN TABLE oratab (
\&                id        integer           NOT NULL,
\&                text      character varying(30),
\&                floating  double precision  NOT NULL
\&        ) SERVER oradb OPTIONS (table \*(AqORATAB\*(Aq);
.Ve
.Sp
Now you can use the table like a regular PostgreSQL table.
.Sp
See http://pgxn.org/dist/oracle_fdw/ for more information on this foreign data
wrapper.
.Sp
Release 10 adds a new export type destinated to evaluate the content of the
database to migrate, in terms of objects and cost to end the migration:
.Sp
.Vb 1
\&        SHOW_REPORT  : show a detailled report of the Oracle database content.
.Ve
.Sp
Here is a sample of report: http://ora2pg.darold.net/report.html
.Sp
There also a more advanced report with migration cost. See the dedicated chapter
about Migration Cost Evaluation.
.IP "\s-1ESTIMATE_COST\s0" 4
.IX Item "ESTIMATE_COST"
Activate the migration cost evaluation. Must only be used with \s-1SHOW_REPORT,
FUNCTION, PROCEDURE, PACKAGE\s0 and \s-1QUERY\s0 export type. Default is disabled.
You may wat to use the \-\-estimate_cost command line option instead to activate
this functionnality. Note that enabling this directive will force \s-1PLSQL_PGSQL\s0
activation.
.IP "\s-1COST_UNIT_VALUE\s0" 4
.IX Item "COST_UNIT_VALUE"
Set the value in minutes of the migration cost evaluation unit. Default
is five minutes per unit. See \-\-cost_unit_value to change the unit value
at command line.
.IP "\s-1DUMP_AS_HTML\s0" 4
.IX Item "DUMP_AS_HTML"
By default when using \s-1SHOW_REPORT\s0 the migration report is generated as simple
text, enabling this directive will force ora2pg to create a report in \s-1HTML\s0
format.
.Sp
See http://ora2pg.darold.net/report.html for a sample report.
.IP "\s-1HUMAN_DAYS_LIMIT\s0" 4
.IX Item "HUMAN_DAYS_LIMIT"
Use this directive to redefined the number of human-days limit where the
migration assessment level must switch from B to C. Default is set to 10
human-days.
.IP "\s-1JOBS\s0" 4
.IX Item "JOBS"
This configuration directive adds multiprocess support to data export type,
the value is the number of process to use. Default is multiprocess disable.
.Sp
This directive is used to set the number of cores to used to parallelize
data import into PostgreSQL. It replace the old code based on Perl Threads
activated with the obsolete \s-1THREAD_COUNT\s0 configuration directive that was
not very useful and is now replaced with \fIfork()\fR calls.
.Sp
There's no more limitation in parallel processing than the number of cores
and the PostgreSQL I/O performance capabilities.
.Sp
Doesn't works under Windows Operating System, it is simply disabled.
.IP "\s-1ORACLE_COPIES\s0" 4
.IX Item "ORACLE_COPIES"
This configuration directive adds multiprocess support to extract data
from Oracle. The value is the number of process to use to parallelize
the select query. Default is parallel query disable.
.Sp
The parallelism is built on splitting the query following of the number
of cores given as value to \s-1ORACLE_COPIES\s0 as follow:
.Sp
.Vb 1
\&        SELECT * FROM MYTABLE WHERE ABS(MOD(COLUMN, ORACLE_COPIES)) = CUR_PROC
.Ve
.Sp
where \s-1COLUMN\s0 is a technical key like a primary or unique key where split
will be based and the current core used by the query (\s-1CUR_PROC\s0).
.Sp
Doesn't works under Windows Operating System, it is simply disabled.
.IP "\s-1DEFINED_PK\s0" 4
.IX Item "DEFINED_PK"
This directive is used to defined the technical key to used to split
the query between number of cores set with the \s-1ORACLE_COPIES\s0 variable.
For example:
.Sp
.Vb 1
\&        DEFINED_PK      EMPLOYEES:employee_id
.Ve
.Sp
The parallel query that will be used supposing that \-J or \s-1ORACLE_COPIES\s0
is set to 8:
.Sp
.Vb 1
\&        SELECT * FROM EMPLOYEES WHERE ABS(MOD(employee_id, 8)) = N
.Ve
.Sp
where N is the current process forked starting from 0.
.IP "\s-1PARALLEL_TABLES\s0" 4
.IX Item "PARALLEL_TABLES"
This directive is used to defined the number of tables that will be processed
in parallel for data extraction. The limit is the number of cores on your machine.
Ora2Pg will open one database connection for each parallel table extraction.
This directive, when upper than 1, will invalidate \s-1ORACLE_COPIES\s0 but not \s-1JOBS,\s0
so the real number of process that will be used is \s-1PARALLEL_TABLES\s0 * \s-1JOBS.\s0
.Sp
Note that this directive when set upper that 1 will also automatically enable
the \s-1FILE_PER_TABLE\s0 directive if your are exporting to files.
.IP "\s-1FDW_SERVER\s0" 4
.IX Item "FDW_SERVER"
This directive is used to set the name of the foreign data server that is used
in the \*(L"\s-1CREATE SERVER\s0 name \s-1FOREIGN DATA WRAPPER\s0 oracle_fdw ...\*(R" command. This
name will then be used in the \*(L"\s-1CREATE FOREIGN TABLE ...\*(R" SQL\s0 command. Default
is arbitrary set to orcl. This only concern export type \s-1FDW.\s0
.IP "\s-1EXTERNAL_TO_FDW\s0" 4
.IX Item "EXTERNAL_TO_FDW"
This directive, enabled by default, allow to export Oracle's External Tables as
file_fdw foreign tables. To not export these tables at all, set the directive
to 0.
.IP "\s-1INTERNAL_DATE_MAX\s0" 4
.IX Item "INTERNAL_DATE_MAX"
Internal timestamp retrieves from custom type are extracted in the following
format: 01\-JAN\-77 12.00.00.000000 \s-1AM.\s0 It is impossible to know the exact century
that must be used, so by default any year below 49 will be added to 2000
and others to 1900. You can use this directive to change the default value 49.
this is only relevant if you have user defined type with a column timestamp.
.IP "\s-1AUDIT_USER\s0" 4
.IX Item "AUDIT_USER"
Set the comma separated list of username that must be used to filter
queries from the \s-1DBA_AUDIT_TRAIL\s0 table. Default is to not scan this
table and to never look for queries. This parameter is used only with
\&\s-1SHOW_REPORT\s0 and \s-1QUERY\s0 export type with no input file for queries.
Note that queries will be normalized before output unlike when a file
is given at input using the \-i option or \s-1INPUT\s0 directive.
.SS "Limiting object to export"
.IX Subsection "Limiting object to export"
You may want to export only a part of an Oracle database, here are a set of
configuration directives that will allow you to control what parts of the
database should be exported.
.IP "\s-1ALLOW\s0" 4
.IX Item "ALLOW"
This directive allow you to set a list of objects on witch the export must be
limited, excluding all other objects in the same type of export. The value is
a space or comma-separated list of objects name to export. You can include
valid regex into the list. For example:
.Sp
.Vb 1
\&        ALLOW           EMPLOYEES SALE_.* COUNTRIES .*_GEOM_SEQ
.Ve
.Sp
will export objects with name \s-1EMPLOYEES, COUNTRIES,\s0 all objects begining with
\&'\s-1SALE_\s0' and all objects with a name ending by '_GEOM_SEQ'. The object depends
of the export type. Note that regex will not works with 8i database, you must
use the % placeholder instead, Ora2Pg will use the \s-1LIKE\s0 operator.
.Sp
This is the manner to declare global filters that will be used with the current
export type. You can also use extended filters that will be applied on specific
objects or only on their related export type. For example:
.Sp
.Vb 1
\&        ora2pg \-p \-c ora2pg.conf \-t TRIGGER \-a \*(AqTABLE[employees]\*(Aq
.Ve
.Sp
will limit export of trigger to those defined on table employees. If you want
to extract all triggers but not some \s-1INSTEAD OF\s0 triggers:
.Sp
.Vb 1
\&        ora2pg \-c ora2pg.conf \-t TRIGGER \-e \*(AqVIEW[trg_view_.*]\*(Aq
.Ve
.Sp
Or a more complex form:
.Sp
.Vb 2
\&        ora2pg \-p \-c ora2pg.conf \-t TABLE \-a \*(AqTABLE[EMPLOYEES]\*(Aq \e
\&                \-e \*(AqINDEX[emp_.*];CKEY[emp_salary_min]\*(Aq
.Ve
.Sp
This command will export the definition of the employee table but will exclude
all index begining with 'emp_' and the \s-1CHECK\s0 contraint called 'emp_salary_min'.
.Sp
When exporting partition you can exclude some partition tables by using
.Sp
.Vb 1
\&        ora2pg \-p \-c ora2pg.conf \-t PARTITION \-e \*(AqPARTITION[PART_199.* PART_198.*]\*(Aq
.Ve
.Sp
This will exclude partitionned tables for year 1980 to 1999 from the export but
not the main partition table. The trigger will also be adapted to exclude those
table.
.Sp
With \s-1GRANT\s0 export you can use this extended form to exclude some users from the
export or limit the export to some others:
.Sp
.Vb 1
\&        ora2pg \-p \-c ora2pg.conf \-t GRANT \-a \*(AqUSER1 USER2\*(Aq
.Ve
.Sp
or
.Sp
.Vb 1
\&        ora2pg \-p \-c ora2pg.conf \-t GRANT \-a \*(AqGRANT[USER1 USER2]\*(Aq
.Ve
.Sp
will limit export grants to users \s-1USER1\s0 and \s-1USER2.\s0 But if you don't want to
export grants on some functions for these users, for example:
.Sp
.Vb 1
\&        ora2pg \-p \-c ora2pg.conf \-t GRANT \-a \*(AqUSER1 USER2\*(Aq \-e \*(AqFUNCTION[adm_.*];PROCEDURE[adm_.*]\*(Aq
.Ve
.Sp
Advanced filters may need some learning.
.IP "\s-1EXCLUDE\s0" 4
.IX Item "EXCLUDE"
This directive is the opposite of the previous, it allow you to define a space
or comma-separated list of object name to exclude from the export. You can
include valid regex into the list. For example:
.Sp
.Vb 1
\&        EXCLUDE         EMPLOYEES TMP_.* COUNTRIES
.Ve
.Sp
will exclude object with name \s-1EMPLOYEES, COUNTRIES\s0 and all tables begining with
\&'tmp_'.
.Sp
For example, you can ban from export some unwanted function with this directive:
.Sp
.Vb 1
\&        EXCLUDE         write_to_.* send_mail_.*
.Ve
.Sp
this example will exclude all functions, procedures or functions in a package
with the name begining with those regex. Note that regex will not works with
8i database, you must use the % placeholder instead, Ora2Pg will use the \s-1NOT
LIKE\s0 operator.
.Sp
See above (directive '\s-1ALLOW\s0') for the extended syntax.
.IP "\s-1VIEW_AS_TABLE\s0" 4
.IX Item "VIEW_AS_TABLE"
Set which view to export as table. By default none. Value must be a list of
view name or regexp separated by space or comma. If the object name is a view
and the export type is \s-1TABLE,\s0 the view will be exported as a create table
statement. If export type is \s-1COPY\s0 or \s-1INSERT,\s0 the corresponding data will be
exported.
.Sp
See chapter \*(L"Exporting views as PostgreSQL table\*(R" for more details.
.IP "\s-1WHERE\s0" 4
.IX Item "WHERE"
This directive allow you to specify a \s-1WHERE\s0 clause filter when dumping the
contents of tables. Value is construct as follow: TABLE_NAME[\s-1WHERE_CLAUSE\s0], or
if you have only one where clause for each table just put the where clause as
value. Both are possible too. Here are some examples:
.Sp
.Vb 2
\&        # Global where clause applying to all tables included in the export
\&        WHERE  1=1
\&
\&        # Apply the where clause only on table TABLE_NAME
\&        WHERE  TABLE_NAME[ID1=\*(Aq001\*(Aq]
\&
\&        # Applies two different clause on tables TABLE_NAME and OTHER_TABLE
\&        # and a generic where clause on DATE_CREATE to all other tables
\&        WHERE  TABLE_NAME[ID1=\*(Aq001\*(Aq OR ID1=\*(Aq002] DATE_CREATE > \*(Aq2001\-01\-01\*(Aq OTHER_TABLE[NAME=\*(Aqtest\*(Aq]
.Ve
.Sp
Any where clause not included into a table name bracket clause will be applied
to all exported table including the tables defined in the where clause. These
\&\s-1WHERE\s0 clauses are very useful if you want to archive some data or at the
opposite only export some recent data.
.Sp
To be able to quickly test data import it is useful to limit data export to the
first thousand tuples of each table. For Oracle define the following clause:
.Sp
.Vb 1
\&        WHERE   ROWNUM < 1000
.Ve
.Sp
and for MySQL, use the following:
.Sp
.Vb 1
\&        WHERE   1=1 LIMIT 1,1000
.Ve
.Sp
This can also be restricted to some tables data export.
.IP "\s-1TOP_MAX\s0" 4
.IX Item "TOP_MAX"
This directive is used to limit the number of item shown in the top N lists
like the top list of tables per number of rows and the top list of largest
tables in megabytes. By default it is set to 10 items.
.IP "\s-1LOG_ON_ERROR\s0" 4
.IX Item "LOG_ON_ERROR"
Enable this directive if you want to continue direct data import on error.
When Ora2Pg received an error in the \s-1COPY\s0 or \s-1INSERT\s0 statement from PostgreSQL
it will log the statement to a file called TABLENAME_error.log in the output
directory and continue to next bulk of data. Like this you can try to fix the
statement and manually reload the error log file. Default is disabled: abort
import on error.
.IP "\s-1REPLACE_QUERY\s0" 4
.IX Item "REPLACE_QUERY"
Sometime you may want to extract data from an Oracle table but you need a
a custom query for that. Not just a \*(L"\s-1SELECT\s0 * \s-1FROM\s0 table\*(R" like Ora2Pg do
but a more complexe query. This directive allow you to overwrite the query
used by Ora2Pg to extract data. The format is TABLENAME[\s-1SQL_QUERY\s0].
If you have multiple table to extract by replacing the Ora2Pg query, you can
define multiple \s-1REPLACE_QUERY\s0 lines.
.Sp
.Vb 1
\&        REPLACE_QUERY   EMPLOYEES[SELECT e.id,e.fisrtname,lastname FROM EMPLOYEES e JOIN EMP_UPDT u ON (e.id=u.id AND u.cdate>\*(Aq2014\-08\-01 00:00:00\*(Aq)]
.Ve
.SS "Modifying object structure"
.IX Subsection "Modifying object structure"
One of the great usage of Ora2Pg is its flexibility to replicate Oracle database
into PostgreSQL database with a different structure or schema. There's three
configuration directives that allow you to map those differences.
.IP "\s-1REORDERING_COLUMNS\s0" 4
.IX Item "REORDERING_COLUMNS"
Enable this directive to reordering columns and minimized the footprint
on disc, so that more rows fit on a data page, which is the most important
factor for speed. Default is disabled, that mean the same order than in
Oracle tables definition, that's should be enough for most usage. This
directive is only used with \s-1TABLE\s0 export.
.IP "\s-1MODIFY_STRUCT\s0" 4
.IX Item "MODIFY_STRUCT"
This directive allow you to limit the columns to extract for a given table. The
value consist in a space-separated list of table name with a set of column
between parenthesis as follow:
.Sp
.Vb 1
\&        MODIFY_STRUCT   NOM_TABLE(nomcol1,nomcol2,...) ...
.Ve
.Sp
for example:
.Sp
.Vb 1
\&        MODIFY_STRUCT   T_TEST1(id,dossier) T_TEST2(id,fichier)
.Ve
.Sp
This will only extract columns 'id' and 'dossier' from table T_TEST1 and columns
\&'id' and 'fichier' from the T_TEST2 table. This directive is only used with \s-1COPY\s0
or \s-1INSERT\s0 export.
.IP "\s-1MODIFY_TYPE\s0" 4
.IX Item "MODIFY_TYPE"
Some time you need to force the destination type, for example a column
exported as timestamp by Ora2Pg can be forced into type date. Value is
a comma-separated list of \s-1TABLE:COLUMN:TYPE\s0 structure. If you need to use
comma or space inside type definintion you will have to backslach them.
.Sp
.Vb 1
\&        TABLE1:COL3:varchar,TABLE1:COL4:decimal(9\e,6)
.Ve
.IP "\s-1REPLACE_TABLES\s0" 4
.IX Item "REPLACE_TABLES"
This directive allow you to remap a list of Oracle table name to a PostgreSQL table name during export. The value is a list of space-separated values with the following structure:
.Sp
.Vb 1
\&        REPLACE_TABLES  ORIG_TBNAME1:DEST_TBNAME1 ORIG_TBNAME2:DEST_TBNAME2
.Ve
.Sp
Oracle tables \s-1ORIG_TBNAME1\s0 and \s-1ORIG_TBNAME2\s0 will be respectively renamed into
\&\s-1DEST_TBNAME1\s0 and \s-1DEST_TBNAME2\s0
.IP "\s-1REPLACE_COLS\s0" 4
.IX Item "REPLACE_COLS"
Like table name, the name of the column can be remapped to a different name
using the following syntaxe:
.Sp
.Vb 1
\&        REPLACE_COLS    ORIG_TBNAME(ORIG_COLNAME1:NEW_COLNAME1,ORIG_COLNAME2:NEW_COLNAME2)
.Ve
.Sp
For example:
.Sp
.Vb 1
\&        REPLACE_COLS    T_TEST(dico:dictionary,dossier:folder)
.Ve
.Sp
will rename Oracle columns 'dico' and 'dossier' from table T_TEST into new name
\&'dictionary' and 'folder'.
.IP "\s-1REPLACE_AS_BOOLEAN\s0" 4
.IX Item "REPLACE_AS_BOOLEAN"
If you want to change the type of some Oracle columns into PostgreSQL boolean
during the export you can define here a list of tables and column separated by
space as follow.
.Sp
.Vb 1
\&        REPLACE_AS_BOOLEAN     TB_NAME1:COL_NAME1 TB_NAME1:COL_NAME2 TB_NAME2:COL_NAME2
.Ve
.Sp
The values set in the boolean columns list will be replaced with the 't' and 'f'
following the default replacement values and those additionally set in directive
\&\s-1BOOLEAN_VALUES.\s0
.Sp
You can also give a type and a precision to automatically convert all fields of
that type as a boolean. For example:
.Sp
.Vb 1
\&        REPLACE_AS_BOOLEAN      NUMBER:1 CHAR:1 TB_NAME1:COL_NAME1 TB_NAME1:COL_NAME2
.Ve
.Sp
will also replace any field of type \fInumber\fR\|(1) or \fIchar\fR\|(1) as a boolean in all exported
tables.
.IP "\s-1BOOLEAN_VALUES\s0" 4
.IX Item "BOOLEAN_VALUES"
Use this to add additional definition of the possible boolean values used in
Oracle fields. You must set a space-separated list of \s-1TRUE:FALSE\s0 values. By
default here are the values recognized by Ora2Pg:
.Sp
.Vb 1
\&        BOOLEAN_VALUES          yes:no y:n 1:0 true:false enabled:disabled
.Ve
.Sp
Any values defined here will be added to the default list.
.IP "\s-1REPLACE_ZERO_DATE\s0" 4
.IX Item "REPLACE_ZERO_DATE"
When Ora2Pg find a \*(L"zero\*(R" date: 0000\-00\-00 00:00:00 it is replaced by a \s-1NULL.\s0
This could be a problem if your column is defined with \s-1NOT NULL\s0 constraint.
If you can not remove the constraint, use this directive to set an arbitral
date that will be used instead. You can also use \-INFINITY if you don't want
to use a fake date.
.IP "\s-1INDEXES_SUFFIX\s0" 4
.IX Item "INDEXES_SUFFIX"
Add the given value as suffix to indexes names. Useful if you have indexes
with same name as tables. For example:
.Sp
.Vb 1
\&        INDEXES_SUFFIX          _idx
.Ve
.Sp
will add _idx at ed of all index name. Not so common but can help.
.IP "\s-1INDEXES_RENAMING\s0" 4
.IX Item "INDEXES_RENAMING"
Enable this directive to rename all indexes using tablename_columns_names.
Could be very useful for database that have multiple time the same index name
or that use the same name than a table, which is not allowed by PostgreSQL
Disabled by default.
.IP "\s-1PREFIX_PARTITION\s0" 4
.IX Item "PREFIX_PARTITION"
Enable this directive if you want that your partition table name will be
exported using the parent table name. Disabled by default. If you have
multiple partitioned table, when exported to PostgreSQL some partitions
could have the same name but dfferent parent tables. This is not allowed,
table name must be unique.
.SS "Oracle Spatial to PostGis"
.IX Subsection "Oracle Spatial to PostGis"
Ora2Pg fully export Spatial object from Oracle database. There's some
configuration directives that could be used to control the export.
.IP "\s-1AUTODETECT_SPATIAL_TYPE\s0" 4
.IX Item "AUTODETECT_SPATIAL_TYPE"
By default Ora2Pg is looking at indexes to see the spatial constraint type
and dimensions defined under Oracle. Those constraints are passed as at index
creation using for example:
.Sp
.Vb 2
\&        CREATE INDEX ... INDEXTYPE IS MDSYS.SPATIAL_INDEX
\&        PARAMETERS(\*(Aqsdo_indx_dims=2, layer_gtype=point\*(Aq);
.Ve
.Sp
If those Oracle constraints parameters are not set, the default is to export
those columns as generic type \s-1GEOMETRY\s0 to be able to receive any spatial type.
.Sp
The \s-1AUTODETECT_SPATIAL_TYPE\s0 directive allow to force Ora2Pg to autodetect the
real spatial type and dimension used in a spatial column otherwise a non\-
constrained \*(L"geometry\*(R" type is used. Enabling this feature will force Ora2Pg to
scan a sample of 50000 column to look at the \s-1GTYPE\s0 used. You can increase or
reduce the sample size by setting the value of \s-1AUTODETECT_SPATIAL_TYPE\s0 to the
desired number of line to scan. The directive is enabled by default.
.Sp
For example, in the case of a column named shape and defined with Oracle type
\&\s-1SDO_GEOMETRY,\s0 with \s-1AUTODETECT_SPATIAL_TYPE\s0 disabled it will be converted as:
.Sp
.Vb 1
\&    shape geometry(GEOMETRY) or shape geometry(GEOMETRYZ, 4326)
.Ve
.Sp
and if the directive is enabled and the column just contains a single
geometry type that use a single dimension:
.Sp
.Vb 1
\&    shape geometry(POLYGON, 4326) or shape geometry(POLYGONZ, 4326)
.Ve
.Sp
with a two or three dimensional polygon.
.IP "\s-1CONVERT_SRID\s0" 4
.IX Item "CONVERT_SRID"
This directive allow you to control the automatically convertion of Oracle
\&\s-1SRID\s0 to standard \s-1EPSG.\s0 If enabled, Ora2Pg will use the Oracle function
sdo_cs.\fImap_oracle_srid_to_epsg()\fR to convert all \s-1SRID.\s0 Enabled by default.
.Sp
If the \s-1SDO_SRID\s0 returned by Oracle is \s-1NULL,\s0 it will be replaced by the
default value 8307 converted to its \s-1EPSG\s0 value: 4326 (see \s-1DEFAULT_SRID\s0).
.Sp
If the value is upper than 1, all \s-1SRID\s0 will be forced to this value, in
this case \s-1DEFAULT_SRID\s0 will not be used when Oracle returns a null value
and the value will be forced to \s-1CONVERT_SRID.\s0
.Sp
Note that it is also possible to set the \s-1EPSG\s0 value on Oracle side when
sdo_cs.\fImap_oracle_srid_to_epsg()\fR return \s-1NULL\s0 if your want to force the value:
.Sp
.Vb 1
\&  system@db> UPDATE sdo_coord_ref_sys SET legacy_code=41014 WHERE srid = 27572;
.Ve
.IP "\s-1DEFAULT_SRID\s0" 4
.IX Item "DEFAULT_SRID"
Use this directive to override the default \s-1EPSG SRID\s0 to used: 4326.
Can be overwritten by \s-1CONVERT_SRID,\s0 see above.
.IP "\s-1GEOMETRY_EXTRACT_TYPE\s0" 4
.IX Item "GEOMETRY_EXTRACT_TYPE"
This directive can take three values: \s-1WKT \s0(default), \s-1WKB\s0 and \s-1INTERNAL.\s0
When it is set to \s-1WKT,\s0 Ora2Pg will use \s-1SDO_UTIL.\fITO_WKTGEOMETRY\s0()\fR to
extract the geometry data. When it is set to \s-1WKB,\s0 Ora2Pg will use the
binary output using \s-1SDO_UTIL.\fITO_WKBGEOMETRY\s0()\fR. If those two extract type
are calles at Oracle side, they are slow and you can easily reach Out Of
Memory when you have lot of rows. Also \s-1WKB\s0 is not able to export 3D geometry
and some geometries like \s-1CURVEPOLYGON.\s0 In this case you may use the \s-1INTERNAL\s0
extraction type. It will use a Pure Perl library to convert the \s-1SDO_GEOMETRY\s0
data into a \s-1WKT\s0 representation, the translation is done on Ora2Pg side.
This is a work in progress, please validate your exported data geometries
before use. Default spatial object extraction type is \s-1INTERNAL.\s0
.IP "\s-1POSTGIS_SCHEMA\s0" 4
.IX Item "POSTGIS_SCHEMA"
Use this directive to add a specific schema to the search path to look
for PostGis functions.
.SS "PostgreSQL Import"
.IX Subsection "PostgreSQL Import"
By default conversion to PostgreSQL format is written to file 'output.sql'.
The command:
.PP
.Vb 1
\&        psql mydb < output.sql
.Ve
.PP
will import content of file output.sql into PostgreSQL mydb database.
.IP "\s-1DATA_LIMIT\s0" 4
.IX Item "DATA_LIMIT"
When you are performing \s-1INSERT/COPY\s0 export Ora2Pg proceed by chunks of \s-1DATA_LIMIT\s0
tuples for speed improvement. Tuples are stored in memory before being written
to disk, so if you want speed and have enough system resources you can grow
this limit to an upper value for example: 100000 or 1000000. Before release 7.0
a value of 0 mean no limit so that all tuples are stored in memory before being
flushed to disk. In 7.x branch this has been remove and chunk will be set to the
default: 10000
.IP "\s-1BLOB_LIMIT\s0" 4
.IX Item "BLOB_LIMIT"
When Ora2Pg detect a table with some \s-1BLOB\s0 it will automatically reduce the
value of this directive by dividing it by 10 until his value is below 1000.
You can control this value by setting \s-1BLOB_LIMIT.\s0 Exporting \s-1BLOB\s0 use lot of
ressources, setting it to a too high value can produce \s-1OOM.\s0
.IP "\s-1OUTPUT\s0" 4
.IX Item "OUTPUT"
The Ora2Pg output filename can be changed with this directive. Default value is
output.sql. if you set the file name with extension .gz or .bz2 the output will
be automatically compressed. This require that the Compress::Zlib Perl module
is installed if the filename extension is .gz and that the bzip2 system command
is installed for the .bz2 extension.
.IP "\s-1OUTPUT_DIR\s0" 4
.IX Item "OUTPUT_DIR"
Since release 7.0, you can define a base directory where wfile will be written.
The directory must exists.
.IP "\s-1BZIP2\s0" 4
.IX Item "BZIP2"
This directive allow you to specify the full path to the bzip2 program if it
can not be found in the \s-1PATH\s0 environment variable.
.IP "\s-1FILE_PER_CONSTRAINT\s0" 4
.IX Item "FILE_PER_CONSTRAINT"
Allow object constraints to be saved in a separate file during schema export.
The file will be named \s-1CONSTRAINTS_OUTPUT,\s0 where \s-1OUTPUT\s0 is the value of the
corresponding configuration directive. You can use .gz xor .bz2 extension to
enable compression. Default is to save all data in the \s-1OUTPUT\s0 file. This
directive is usable only with \s-1TABLE\s0 export type.
.Sp
The constraints can be imported quickly into PostgreSQL using the \s-1LOAD\s0 export
type to parallelize their creation over multiple (\-j or \s-1JOBS\s0) connections.
.IP "\s-1FILE_PER_INDEX\s0" 4
.IX Item "FILE_PER_INDEX"
Allow indexes to be saved in a separate file during schema export. The file
will be named \s-1INDEXES_OUTPUT,\s0 where \s-1OUTPUT\s0 is the value of the corresponding
configuration directive. You can use .gz xor .bz2 file extension to enable
compression. Default is to save all data in the \s-1OUTPUT\s0 file. This directive
is usable only with \s-1TABLE AND TABLESPACE\s0 export type. With the \s-1TABLESPACE\s0
export, it is used to write \*(L"\s-1ALTER INDEX ... TABLESPACE ...\*(R"\s0 into a separate
file named \s-1TBSP_INDEXES_OUPUT\s0 that can be loaded at end of the migration after
the indexes creation to move the indexes.
.Sp
The indexes can be imported quickly into PostgreSQL using the \s-1LOAD\s0 export
type to parallelize their creation over multiple (\-j or \s-1JOBS\s0) connections.
.IP "\s-1FILE_PER_TABLE\s0" 4
.IX Item "FILE_PER_TABLE"
Allow data export to be saved in one file per table/view. The files will be
named as tablename_OUTPUT, where \s-1OUTPUT\s0 is the value of the corresponding
configuration directive. You can still use .gz xor .bz2 extension in the \s-1OUTPUT\s0
directive to enable compression. Default 0 will save all data in one file, set
it to 1 to enable this feature. This is usable only during \s-1INSERT\s0 or \s-1COPY\s0 export
type.
.IP "\s-1FILE_PER_FUNCTION\s0" 4
.IX Item "FILE_PER_FUNCTION"
Allow functions, procedures and triggers to be saved in one file per object.
The files will be named as objectname_OUTPUT. Where \s-1OUTPUT\s0 is the value of the
corresponding configuration directive. You can still use .gz xor .bz2 extension
in the \s-1OUTPUT\s0 directive to enable compression. Default 0 will save all in one
single file, set it to 1 to enable this feature. This is usable only during the
corresponding export type, the package body export has a special behavior.
.Sp
When export type is \s-1PACKAGE\s0 and you've enabled this directive, Ora2Pg will
create a directory per package, named with the lower case name of the package,
and will create one file per function/procedure into that directory. If the
configuration directive is not enabled, it will create one file per package as
packagename_OUTPUT, where \s-1OUTPUT\s0 is the value of the corresponding directive.
.IP "\s-1TRUNCATE_TABLE\s0" 4
.IX Item "TRUNCATE_TABLE"
If this directive is set to 1, a \s-1TRUNCATE TABLE\s0 instruction will be add before
loading data. This is usable only during \s-1INSERT\s0 or \s-1COPY\s0 export type.
.Sp
When activated, the instruction will be added only if there's no global \s-1DELETE\s0
clause or not one specific to the current table (see bellow).
.IP "\s-1DELETE\s0" 4
.IX Item "DELETE"
Support for include a \s-1DELETE FROM ... WHERE\s0 clause filter before importing
data and perform a delete of some lines instead of truncatinf tables.
Value is construct as follow: TABLE_NAME[\s-1DELETE_WHERE_CLAUSE\s0], or
if you have only one where clause for all tables just put the delete
clause as single value. Both are possible too. Here are some examples:
.Sp
.Vb 3
\&        DELETE  1=1    # Apply to all tables and delete all tuples
\&        DELETE TABLE_TEST[ID1=\*(Aq001\*(Aq]   # Apply only on table TABLE_TEST
\&        DELETE TABLE_TEST[ID1=\*(Aq001\*(Aq OR ID1=\*(Aq002] DATE_CREATE > \*(Aq2001\-01\-01\*(Aq TABLE_INFO[NAME=\*(Aqtest\*(Aq]
.Ve
.Sp
The last applies two different delete where clause on tables \s-1TABLE_TEST\s0 and
\&\s-1TABLE_INFO\s0 and a generic delete where clause on \s-1DATE_CREATE\s0 to all other tables.
If \s-1TRUNCATE_TABLE\s0 is enabled it will be applied to all tables not covered by
the \s-1DELETE\s0 definition.
.Sp
These \s-1DELETE\s0 clauses might be useful with regular \*(L"updates\*(R".
.IP "\s-1STOP_ON_ERROR\s0" 4
.IX Item "STOP_ON_ERROR"
Set this parameter to 0 to not include the call to \eset \s-1ON_ERROR_STOP ON\s0 in
all \s-1SQL\s0 scripts generated by Ora2Pg. By default this order is always present
so that the script will immediatly abort when an error is encountered.
.IP "\s-1COPY_FREEZE\s0" 4
.IX Item "COPY_FREEZE"
Enable this directive to use \s-1COPY FREEZE\s0 instead of a simple \s-1COPY\s0 to
export data with rows already frozen. This is intended as a performance
option for initial data loading. Rows will be frozen only if the table
being loaded has been created or truncated in the current subtransaction.
This will only works with export to file and when \-J or \s-1ORACLE_COPIES\s0 is
not set or default to 1. It can be used with direct import into PostgreSQL
under the same condition but \-j or \s-1JOBS\s0 must also be unset or default to 1.
.PP
If you want to import data on the fly to the PostgreSQL database you have three
configuration directives to set the PostgreSQL database connection. This is only
possible with \s-1COPY\s0 or \s-1INSERT\s0 export type as for database schema there's no real
interest to do that.
.IP "\s-1PG_DSN\s0" 4
.IX Item "PG_DSN"
Use this directive to set the PostgreSQL data source namespace using DBD::Pg
Perl module as follow:
.Sp
.Vb 1
\&        dbi:Pg:dbname=pgdb;host=localhost;port=5432
.Ve
.Sp
will connect to database 'pgdb' on localhost at tcp port 5432.
.IP "\s-1PG_USER\s0 and \s-1PG_PWD\s0" 4
.IX Item "PG_USER and PG_PWD"
These two directives are used to set the login user and password.
.IP "\s-1SYNCHRONOUS_COMMIT\s0" 4
.IX Item "SYNCHRONOUS_COMMIT"
Specifies whether transaction commit will wait for \s-1WAL\s0 records to be written
to disk before the command returns a \*(L"success\*(R" indication to the client. This
is the equivalent to set synchronous_commit directive of postgresql.conf file.
This is only used when you load data directly to PostgreSQL, the default is
off to disable synchronous commit to gain speed at writing data. Some modified
version of PostgreSQL, like greenplum, do not have this setting, so in this
set this directive to 1, ora2pg will not  try to change the setting.
.SS "Taking export under control"
.IX Subsection "Taking export under control"
The following other configuration directives interact directly with the export process and give you fine granuality in database export control.
.IP "\s-1SKIP\s0" 4
.IX Item "SKIP"
For \s-1TABLE\s0 export you may not want to export all schema constraints, the \s-1SKIP\s0
configuration directive allow you to specify a space-separated list of
constraints that should not be exported. Possible values are:
.Sp
.Vb 5
\&        \- fkeys: turn off foreign key constraints
\&        \- pkeys: turn off primary keys
\&        \- ukeys: turn off unique column constraints
\&        \- indexes: turn off all other index types
\&        \- checks: turn off check constraints
.Ve
.Sp
For example:
.Sp
.Vb 1
\&        SKIP    indexes,checks
.Ve
.Sp
will removed indexes ans check constraints from export.
.IP "\s-1PKEY_IN_CREATE\s0" 4
.IX Item "PKEY_IN_CREATE"
Enable this directive if you want to add primary key definition inside the
create table statement. If disabled (the default) primary key definition
will be add with an alter table statement. Enable it if you are exporting
to GreenPlum PostgreSQL database.
.IP "\s-1KEEP_PKEY_NAMES\s0" 4
.IX Item "KEEP_PKEY_NAMES"
By default names of the primary and unique key in the source Oracle database
are ignored and key names are created in the target PostgreSQL database with
the PostgreSQL internal default naming rules. If you want to preserve Oracle
primary key names set this option to 1.
.IP "\s-1FKEY_ADD_UPDATE\s0" 4
.IX Item "FKEY_ADD_UPDATE"
This directive allow you to add an \s-1ON UPDATE CASCADE\s0 option to a foreign
key when a \s-1ON DELETE CASCADE\s0 is defined or always. Oracle do not support
this feature, you have to use trigger to operate the \s-1ON UPDATE CASCADE.\s0
As PostgreSQL has this feature, you can choose how to add the foreign
key option. There is three value to this directive: never, the default
that mean that foreign keys will be declared exactly like in Oracle.
The second value is delete, that mean that the \s-1ON UPDATE CASCADE\s0 option
will be added only if the \s-1ON DELETE CASCADE\s0 is already defined on the
foreign Keys. The last value, always, will force all foreign keys to be
defined using the update option.
.IP "\s-1FKEY_DEFERRABLE\s0" 4
.IX Item "FKEY_DEFERRABLE"
When exporting tables, Ora2Pg normally exports constraints as they are, if they
are non-deferrable they are exported as non-deferrable. However, non-deferrable
constraints will probably cause problems when attempting to import data to Pg.
The \s-1FKEY_DEFERRABLE\s0 option set to 1 will cause all foreign key constraints to
be exported as deferrable.
.IP "\s-1DEFER_FKEY\s0" 4
.IX Item "DEFER_FKEY"
In addition, when exporting data the \s-1DEFER_FKEY\s0 option set to 1 will add a
command to defer all foreign key constraints during data export. Constraints
will then be checked at the end of each transaction. Note that this will works
only if foreign keys are deferrable and that all data can stay in a single
transaction. This will work only if foreign keys have been exported as
deferrables. Constraints will then be checked at the end of the transaction.
.Sp
This directive can also be enabled if you want to force all foreign keys to
be created as deferrable and initially deferred during schema export (\s-1TABLE\s0
export type). Since release 11.5 only.
.IP "\s-1DROP_FKEY\s0" 4
.IX Item "DROP_FKEY"
When this directive is enabled Ora2Pg forces the deletion of all foreign
keys before data import and to recreate them at end of the data import.
.IP "\s-1DROP_INDEXES\s0" 4
.IX Item "DROP_INDEXES"
This direction is also introduce since version 7.0 and allow you to gain lot of
speed improvement during data import by removing all indexes that are not an
automatic index (ex: indexes of primary keys) and recreate them at the end of
data import.
.IP "\s-1DISABLE_TRIGGERS\s0" 4
.IX Item "DISABLE_TRIGGERS"
This directive is used to disable triggers on all tables in \s-1COPY\s0 or \s-1INSERT\s0
export modes. Available values are \s-1USER \s0(disable user-defined triggers only)
and \s-1ALL \s0(includes \s-1RI\s0 system triggers). Default is 0: do not add \s-1SQL\s0 statements
to disable trigger before data import.
.Sp
If you want to disable triggers during data migration, set the value to
\&\s-1USER\s0 if your are connected as non superuser and \s-1ALL\s0 if you are connected
as PostgreSQL superuser. A value of 1 is equal to \s-1USER.\s0
.IP "\s-1DISABLE_SEQUENCE\s0" 4
.IX Item "DISABLE_SEQUENCE"
If set to 1 disables alter of sequences on all tables during \s-1COPY\s0 or \s-1INSERT\s0 export
mode. This is used to prevent the update of sequence during data migration.
Default is 0, alter sequences.
.IP "\s-1NOESCAPE\s0" 4
.IX Item "NOESCAPE"
By default all data that are not of type date or time are escaped. If you
experience any problem with that you can set it to 1 to disable character
escaping during data export. This directive is only used during a \s-1COPY\s0 export.
See \s-1STANDARD_CONFORMING_STRINGS\s0 for enabling/disabling escape with \s-1INSERT\s0
statements.
.IP "\s-1STANDARD_CONFORMING_STRINGS\s0" 4
.IX Item "STANDARD_CONFORMING_STRINGS"
This controls whether ordinary string literals ('...') treat backslashes
literally, as specified in \s-1SQL\s0 standard. This was the default before Ora2Pg
v8.5 so that all strings was escaped first, now this is currently on, causing
Ora2Pg to use the escape string syntax (E'...') if this parameter is not
set to 0. This is the exact behavior of the same option in PostgreSQL.
This directive is only used during data export to build \s-1INSERT\s0 statements.
See \s-1NOESCAPE\s0 for enabling/disabling escape in \s-1COPY\s0 statements.
.IP "\s-1PG_NUMERIC_TYPE\s0" 4
.IX Item "PG_NUMERIC_TYPE"
If set to 1 replace portable numeric type into PostgreSQL internal type.
Oracle data type \s-1NUMBER\s0(p,s) is approximatively converted to real and
float PostgreSQL data type. If you have monetary fields or don't want
rounding issues with the extra decimals you should preserve the same
numeric(p,s) PostgreSQL data type. Do that only if you need very good
precision because using numeric(p,s) is slower than using real or double.
.IP "\s-1PG_INTEGER_TYPE\s0" 4
.IX Item "PG_INTEGER_TYPE"
If set to 1 replace portable numeric type into PostgreSQL internal type.
Oracle data type \s-1NUMBER\s0(p) or \s-1NUMBER\s0 are converted to smallint, integer
or bigint PostgreSQL data type following the length of the precision. If
\&\s-1NUMBER\s0 without precision are set to \s-1DEFAULT_NUMERIC \s0(see bellow).
.IP "\s-1DEFAULT_NUMERIC\s0" 4
.IX Item "DEFAULT_NUMERIC"
\&\s-1NUMBER\s0 without precision are converted by default to bigint only if
\&\s-1PG_INTEGER_TYPE\s0 is true. You can overwrite this value to any \s-1PG\s0 type,
like integer or float.
.IP "\s-1DATA_TYPE\s0" 4
.IX Item "DATA_TYPE"
If you're experiencing any problem in data type schema conversion with this
directive you can take full control of the correspondence between Oracle and
PostgreSQL types to redefine data type translation used in Ora2pg. The syntax
is a comma-separated list of \*(L"Oracle datatype:Postgresql datatype\*(R". Here are
the default list used:
.Sp
.Vb 1
\&        DATA_TYPE       DATE:timestamp,LONG:text,LONG RAW:bytea,CLOB:text,NCLOB:text,BLOB:bytea,BFILE:bytea,RAW:bytea,ROWID:oid,FLOAT:double precision,DEC:decimal,DECIMAL:decimal,DOUBLE PRECISION:double precision,INT:integer,INTEGER:integer,REAL:real,SMALLINT:smallint,BINARY_FLOAT:double precision,BINARY_DOUBLE:double precision,TIMESTAMP:timestamp,XMLTYPE:xml,BINARY_INTEGER:integer,PLS_INTEGER:integer,TIMESTAMP WITH TIME ZONE:timestamp with time zone,TIMESTAMP WITH LOCAL TIME ZONE:timestamp with time zone
.Ve
.Sp
Note that the directive and the list definition must be a single line.
.Sp
There's a special case with \s-1BFILE\s0 when they are converted to type \s-1TEXT,\s0 they
will just contains the full path to the external file. If you set the
destination type to \s-1BYTEA,\s0 the default, Ora2Pg will export the content of the
\&\s-1BFILE\s0 as bytea. The third case is when you set the destination type to \s-1EFILE,\s0
in this case, Ora2Pg will export it as an \s-1EFILE\s0 record: (\s-1DIRECTORY, FILENAME\s0).
Use the \s-1DIRECTORY\s0 export type to export the existing directories as well as
priviledge on those directories.
.Sp
There's no \s-1SQL\s0 function available to retrieve the path to the \s-1BFILE,\s0 then Ora2Pg
have to create one using the \s-1DBMS_LOB\s0 package.
.Sp
.Vb 10
\&        CREATE OR REPLACE FUNCTION ora2pg_get_bfilename( p_bfile IN BFILE )
\&        RETURN VARCHAR2
\&          AS
\&            l_dir   VARCHAR2(4000);
\&            l_fname VARCHAR2(4000);
\&            l_path  VARCHAR2(4000);
\&          BEGIN
\&            dbms_lob.FILEGETNAME( p_bfile, l_dir, l_fname );
\&            SELECT directory_path INTO l_path FROM all_directories
\&                WHERE directory_name = l_dir;
\&            l_dir := rtrim(l_path,\*(Aq/\*(Aq);
\&            RETURN l_dir || \*(Aq/\*(Aq || l_fname;
\&          END;
.Ve
.Sp
This function is only created if Ora2Pg found a table with a \s-1BFILE\s0 column and
that the destination type is \s-1TEXT.\s0 The function is dropped at the end of the
export. This concern both, \s-1COPY\s0 and \s-1INSERT\s0 export type.
.Sp
There's no \s-1SQL\s0 function available to retrieve \s-1BFILE\s0 as an \s-1EFILE\s0 record, then
Ora2Pg have to create one using the \s-1DBMS_LOB\s0 package.
.Sp
.Vb 9
\&        CREATE OR REPLACE FUNCTION ora2pg_get_efile( p_bfile IN BFILE )
\&        RETURN VARCHAR2
\&          AS
\&            l_dir   VARCHAR2(4000);
\&            l_fname VARCHAR2(4000);
\&          BEGIN
\&            dbms_lob.FILEGETNAME( p_bfile, l_dir, l_fname );
\&            RETURN \*(Aq(\*(Aq || l_dir || \*(Aq,\*(Aq || l_fnamei || \*(Aq)\*(Aq;
\&          END;
.Ve
.Sp
This function is only created if Ora2Pg found a table with a \s-1BFILE\s0 column and
that the destination type is \s-1EFILE.\s0 The function is dropped at the end of the
export. This concern both, \s-1COPY\s0 and \s-1INSERT\s0 export type.
.Sp
To set the destination type, use the \s-1DATA_TYPE\s0 configuration directive:
.Sp
.Vb 1
\&        DATA_TYPE       BFILE:EFILE
.Ve
.Sp
for example.
.Sp
The \s-1EFILE\s0 type is a user defined type created by the PostgreSQL extension
external_file that can be found here: https://github.com/darold/external_file
This is a port of the \s-1BFILE\s0 Oracle type to PostgreSQL.
.IP "\s-1TRIM_TYPE\s0" 4
.IX Item "TRIM_TYPE"
If you want to convert \s-1CHAR\s0(n) from Oracle into varchar(n) or text on PostgreSQL
using directive \s-1DATA_TYPE,\s0 you might want to do some triming on the data. By
default Ora2Pg will auto-detect this conversion and remove any withspace at both
leading and trailing position. If you just want to remove the leadings character
set the value to \s-1LEADING.\s0 If you just want to remove the trailing character, set
the value to \s-1TRAILING.\s0 Default value is \s-1BOTH.\s0
.IP "\s-1TRIM_CHAR\s0" 4
.IX Item "TRIM_CHAR"
The default triming character is space, use this directive if you need to
change the character that will be removed. For example, set it to \- if you
have leading \- in the char(n) field. To use space as triming charger, comment
this directive, this is the default value.
.IP "\s-1PRESERVE_CASE\s0" 4
.IX Item "PRESERVE_CASE"
If you want to preserve the case of Oracle object name set this directive to 1.
By default Ora2Pg will convert all Oracle object names to lower case.  I do not
recommand to enable this unless you will always have to double-quote object
names on all your \s-1SQL\s0 scripts.
.IP "\s-1ORA_RESERVED_WORDS\s0" 4
.IX Item "ORA_RESERVED_WORDS"
Allow escaping of column name using Oracle reserved words. Value is a list of
comma-separated reserved word. Default is audit,comment.
.IP "\s-1USE_RESERVED_WORDS\s0" 4
.IX Item "USE_RESERVED_WORDS"
Enable this directive if you have table or column names that are a reserved
word for PostgreSQL. Ora2Pg will double quote the name of the object.
.IP "\s-1GEN_USER_PWD\s0" 4
.IX Item "GEN_USER_PWD"
Set this directive to 1 to replace default password by a random password for all
extracted user during a \s-1GRANT\s0 export.
.IP "\s-1PG_SUPPORTS_MVIEW\s0" 4
.IX Item "PG_SUPPORTS_MVIEW"
Since PostgreSQL 9.3, materialized view are supported with the \s-1SQL\s0 syntax
\&'\s-1CREATE MATERIALIZED VIEW\s0'. To force Ora2Pg to use the native PostgreSQL
support you must enable this configuration \- enable by default. If you want
to use the old style with table and a set of function, you should disable it.
.IP "\s-1PG_SUPPORTS_IFEXISTS\s0" 4
.IX Item "PG_SUPPORTS_IFEXISTS"
PostgreSQL version below 9.x do not support \s-1IF EXISTS\s0 in \s-1DDL\s0 statements.
Disabling the directive with value 0 will prevent Ora2Pg to add those
keywords in all generated statments. Default value is 1, enabled.
.IP "\s-1PG_SUPPORTS_ROLE \s0(Deprecated)" 4
.IX Item "PG_SUPPORTS_ROLE (Deprecated)"
This option is deprecated since Ora2Pg release v7.3.
.Sp
By default Oracle roles are translated into PostgreSQL groups. If you have
PostgreSQL 8.1 or more consider the use of \s-1ROLES\s0 and set this directive to 1
to export roles.
.IP "\s-1PG_SUPPORTS_INOUT \s0(Deprecated)" 4
.IX Item "PG_SUPPORTS_INOUT (Deprecated)"
This option is deprecated since Ora2Pg release v7.3.
.Sp
If set to 0, all \s-1IN, OUT\s0 or \s-1INOUT\s0 parameters will not be used into the generated
PostgreSQL function declarations (disable it for PostgreSQL database version
lower than 8.1), This is now enable by default.
.IP "\s-1PG_SUPPORTS_DEFAULT\s0" 4
.IX Item "PG_SUPPORTS_DEFAULT"
This directive enable or disable the use of default parameter value in function
export. Until PostgreSQL 8.4 such a default value was not supported, this feature
is now enable by default.
.IP "\s-1PG_SUPPORTS_WHEN \s0(Deprecated)" 4
.IX Item "PG_SUPPORTS_WHEN (Deprecated)"
Add support to \s-1WHEN\s0 clause on triggers as PostgreSQL v9.0 now support it. This
directive is enabled by default, set it to 0 disable this feature.
.IP "\s-1PG_SUPPORTS_INSTEADOF \s0(Deprecated)" 4
.IX Item "PG_SUPPORTS_INSTEADOF (Deprecated)"
Add support to \s-1INSTEAD OF\s0 usage on triggers (used with \s-1PG \s0>= 9.1), if this
directive is disabled the \s-1INSTEAD OF\s0 triggers will be rewritten as Pg rules.
.IP "\s-1PG_SUPPORTS_CHECKOPTION\s0" 4
.IX Item "PG_SUPPORTS_CHECKOPTION"
If enabled, export views with \s-1CHECK OPTION.\s0 Enable it if you have PostgreSQL
version 9.4 or higher. Default: 0, disabled.
.IP "\s-1PG_SUPPORTS_IFEXISTS\s0" 4
.IX Item "PG_SUPPORTS_IFEXISTS"
If disabled, do not export object with \s-1IF EXISTS\s0 statements.
Enabled by default.
.IP "\s-1BITMAP_AS_GIN\s0" 4
.IX Item "BITMAP_AS_GIN"
Use btree_gin extenstion to create bitmap like index with pg >= 9.4
You will need to create the extension by yourself:
      create extension btree_gin;
Default is to create \s-1GIN\s0 index, when disabled, a btree index will be created
.IP "\s-1LONGREADLEN\s0" 4
.IX Item "LONGREADLEN"
Use this directive to set the database handle's 'LongReadLen' attribute to a
value that will be the larger than the expected size of the LOBs. The default
is 1MB witch may not be enough to extract BLOBs or CLOBs. If the size of the
\&\s-1LOB\s0 exceeds the 'LongReadLen' DBD::Oracle will return a '\s-1ORA\-24345: A\s0 Truncation'
error. Default: 1023*1024 bytes.
.Sp
Take a look at this page to learn more: http://search.cpan.org/~pythian/DBD\-Oracle\-1.22/Oracle.pm#Data_Interface_for_Persistent_LOBs
.Sp
Important note: If you increase the value of this directive take care that
\&\s-1DATA_LIMIT\s0 will probably needs to be reduced. Even if you only have a 1MB blob,
trying to read 10000 of them (the default \s-1DATA_LIMIT\s0) all at once will require
10GB of memory. You may extract data from those table separatly and set a
\&\s-1DATA_LIMIT\s0 to 500 or lower, otherwise you may experience some out of memory.
.IP "\s-1LONGTRUNKOK\s0" 4
.IX Item "LONGTRUNKOK"
If you want to bypass the '\s-1ORA\-24345: A\s0 Truncation' error, set this directive
to 1, it will truncate the data extracted to the LongReadLen value. Disable
by default so that you will be warned if your LongReadLen value is not high
enough.
.IP "\s-1NO_LOB_LOCATOR\s0" 4
.IX Item "NO_LOB_LOCATOR"
Disable this if you don't want to load full content of \s-1BLOB\s0 and \s-1CLOB\s0 and use
\&\s-1LOB\s0 locators instead. This is usefull to not having to set \s-1LONGREADLEN.\s0 Note
that this will not improve speed of \s-1BLOB\s0 export as most of the time is always
consumed by the bytea escaping and in this case data will be processed line
by line and not by chunk of \s-1DATA_LIMIT\s0 rows. For more information on how it
works, see http://search.cpan.org/~pythian/DBD\-Oracle\-1.74/lib/DBD/Oracle.pm#Data_Interface_for_LOB_Locators
Default is enabled, it will not use \s-1LOB\s0 locators for backward compatibility.
.IP "\s-1XML_PRETTY\s0" 4
.IX Item "XML_PRETTY"
Force the use \fIgetStringVal()\fR instead of \fIgetClobVal()\fR for \s-1XML\s0 data export. Default is 1,
enabled for backward compatibility. Set it to 0 to use extract method a la \s-1CLOB.\s0
.IP "\s-1ENABLE_MICROSECOND\s0" 4
.IX Item "ENABLE_MICROSECOND"
Set it to O if you want to disable export of millisecond from Oracle timestamp
columns. By default milliseconds are exported with the use of following format:
.Sp
.Vb 1
\&        \*(AqYYYY\-MM\-DD HH24:MI:SS.FF\*(Aq
.Ve
.Sp
Disabling will force the use of the following Oracle format:
.Sp
.Vb 1
\&        to_char(..., \*(AqYYYY\-MM\-DD HH24:MI:SS\*(Aq)
.Ve
.Sp
By default milliseconds are exported.
.IP "\s-1DISABLE_COMMENT\s0" 4
.IX Item "DISABLE_COMMENT"
Set this to 1 if you don't want to export comment associated to tables and
columns definition. Default is enabled.
.SS "Control MySQL export behavior"
.IX Subsection "Control MySQL export behavior"
.IP "\s-1MYSQL_PIPES_AS_CONCAT\s0" 4
.IX Item "MYSQL_PIPES_AS_CONCAT"
Enable this if double pipe and double ampersand (|| and &&) should not be
taken as equivalent to \s-1OR\s0 and \s-1AND.\s0 It depend of the variable \f(CW@sql_mode\fR,
Use it only if Ora2Pg fail on auto detecting this behavior.
.IP "\s-1MYSQL_INTERNAL_EXTRACT_FORMAT\s0" 4
.IX Item "MYSQL_INTERNAL_EXTRACT_FORMAT"
Enable this directive if you want \s-1\fIEXTRACT\s0()\fR replacement to use the internal
format returned as an integer, for example \s-1DD HH24:MM:SS\s0 will be replaced
with format; DDHH24MMSS::bigint, this depend of your apps usage.
.SS "Special options to handle character encoding"
.IX Subsection "Special options to handle character encoding"
.IP "\s-1NLS_LANG\s0 and \s-1NLS_NCHAR\s0" 4
.IX Item "NLS_LANG and NLS_NCHAR"
By default Ora2Pg will set \s-1NLS_LANG\s0 to \s-1AMERICAN_AMERICA.AL32UTF8\s0 and \s-1NLS_NCHAR\s0
to \s-1AL32UTF8.\s0 It is not recommanded to change those settings but in some case it
could be useful. Using your own settings with those configuration directive will
change the client encoding at Oracle side by setting the environment variables
\&\f(CW$ENV\fR{\s-1NLS_LANG\s0} and \f(CW$ENV\fR{\s-1NLS_NCHAR\s0}.
.IP "\s-1BINMODE\s0" 4
.IX Item "BINMODE"
By default Ora2Pg will force Perl output to be Unicode. It will force printing
to file like this: binmode \s-1OUTFH, \s0\*(L":utf8\*(R"; If you have change the \s-1NLS_LANG\s0
value you might want to set it to raw.
.IP "\s-1CLIENT_ENCODING\s0" 4
.IX Item "CLIENT_ENCODING"
By default PostgreSQL client encoding is automatically set to \s-1UTF8\s0 to avoid
encoding issue. If you have changed the value of \s-1NLS_LANG\s0 you might have to
change  the encoding of the PostgreSQL client.
.Sp
You can take a look at the PostgreSQL supported character sets here: http://www.postgresql.org/docs/9.0/static/multibyte.html
.SS "\s-1PLSQL\s0 to \s-1PLPSQL\s0 convertion"
.IX Subsection "PLSQL to PLPSQL convertion"
Automatic code convertion from Oracle \s-1PLSQL\s0 to PostgreSQL \s-1PLPGSQL\s0 is a work in
progress in Ora2Pg and surely you will always have manual work. The Perl code
used for automatic conversion is all stored in a specific Perl Module named
Ora2Pg/PLSQL.pm feel free to modify/add you own code and send me patches. The
main work in on function, procedure, package and package body headers and
parameters rewrite.
.IP "\s-1PLSQL_PGSQL\s0" 4
.IX Item "PLSQL_PGSQL"
Enable/disable \s-1PLSQL\s0 to \s-1PLPSQL\s0 convertion. Enabled by default.
.IP "\s-1NULL_EQUAL_EMPTY\s0" 4
.IX Item "NULL_EQUAL_EMPTY"
Ora2Pg can replace all conditions with a test on \s-1NULL\s0 by a call to the
\&\fIcoalesce()\fR function to mimic the Oracle behavior where empty string are
considered equal to \s-1NULL.\s0
.Sp
.Vb 2
\&        (field1 IS NULL) is replaced by (coalesce(field1::text, \*(Aq\*(Aq) = \*(Aq\*(Aq)
\&        (field2 IS NOT NULL) is replaced by (field2 IS NOT NULL AND field2::text <> \*(Aq\*(Aq)
.Ve
.Sp
You might want this replacement to be sure that your application will have the
same behavior but if you have control on you application a better way is to
change it to transform empty string into \s-1NULL\s0 because PostgreSQL makes the
difference.
.IP "\s-1EMPTY_LOB_NULL\s0" 4
.IX Item "EMPTY_LOB_NULL"
Force \fIempty_clob()\fR and \fIempty_blob()\fR to be exported as \s-1NULL\s0 instead as empty
string for the first one and '\ex' for the second. If \s-1NULL\s0 is allowed in your
column this might improve data export speed if you have lot of empty lob.
Default is to preserve the exact data from Oracle.
.IP "\s-1PACKAGE_AS_SCHEMA\s0" 4
.IX Item "PACKAGE_AS_SCHEMA"
If you don't want to export package as schema but as simple functions you
might also want to replace all call to package_name.function_name. If you
disable the \s-1PACKAGE_AS_SCHEMA\s0 directive then Ora2Pg will replace all call
to package_name.\fIfunction_name()\fR by \fIpackage_name_function_name()\fR. Default
is to use a schema to emulate package.
.Sp
The replacement will be done in all kind of \s-1DDL\s0 or code that is parsed by
the \s-1PLSQL\s0 to \s-1PLPGSQL\s0 converter. \s-1PLSQL_PGSQL\s0 must be enabled or \-p used in
command line.
.SS "Materialized view"
.IX Subsection "Materialized view"
Since PostgreSQL 9.3, materialized view are supported with the \s-1CREATE MATERIALIZED VIEW\s0 syntax,
to force Ora2Pg to use the native PostgreSQL support you must enable the configuration
directive \s-1PG_SUPPORTS_MVIEW.\s0
.PP
In other case Ora2Pg will export all materialized views as \*(L"Snapshot Materialized Views\*(R" as explain
in this document: http://tech.jonathangardner.net/wiki/PostgreSQL/Materialized_Views.
.PP
When exporting materialized view Ora2Pg will first add the \s-1SQL\s0 code to create the \*(L"materialized_views\*(R" table:
.PP
.Vb 6
\&        CREATE TABLE materialized_views (
\&                mview_name text NOT NULL PRIMARY KEY,
\&                view_name text NOT NULL,
\&                iname text,
\&                last_refresh TIMESTAMP WITH TIME ZONE
\&        );
.Ve
.PP
all materialized views will have an entry in this table. It then adds the plpgsql code to create tree functions:
.PP
.Vb 3
\&        create_materialized_view(text, text, text) used to create a materialized view
\&        drop_materialized_view(text) used to delete a materialized view
\&        refresh_full_materialized_view(text) used to refresh a view
.Ve
.PP
then it adds the \s-1SQL\s0 code to create the view and the materialized view:
.PP
.Vb 2
\&        CREATE VIEW mviewname_mview AS
\&        SELECT ... FROM ...;
\&
\&        SELECT create_materialized_view(\*(Aqmviewname\*(Aq,\*(Aqmviewname_mview\*(Aq, change with the name of the colum to used for the index);
.Ve
.PP
The first argument is the name of the materializd view, the second the name of the view on which the materialized view is based
and the third is the column name on which the index should be build (aka most od the time the primary key). This column is not
automatically deduced so you need to repace its name.
.PP
As said above Ora2Pg only supports snapshot materialized views so the table will be entirely refreshed by issuing first a truncate
of the table and then by load again all data from the view:
.PP
.Vb 1
\&         refresh_full_materialized_view(\*(Aqmviewname\*(Aq);
.Ve
.PP
To drop the materialized view you just have to call the \fIdrop_materialized_view()\fR function with the name of the materialized view
as parameter.
.SS "Other configuration directives"
.IX Subsection "Other configuration directives"
.IP "\s-1DEBUG\s0" 4
.IX Item "DEBUG"
Set it to 1 will enable verbose output.
.IP "\s-1IMPORT\s0" 4
.IX Item "IMPORT"
You can define common Ora2Pg configuration directives into a single file that
can be imported into other configuration files with the \s-1IMPORT\s0 configuration
directive as follow:
.Sp
.Vb 1
\&        IMPORT  commonfile.conf
.Ve
.Sp
will import all configuration directives defined into commonfile.conf into the
current configuration file.
.SS "Exporting views as PostgreSQL tables"
.IX Subsection "Exporting views as PostgreSQL tables"
You can export any Oracle view as a PostgreSQL table simply by setting \s-1TYPE\s0
configuration option to \s-1TABLE\s0 to have the corresponding create table statement.
Or use type \s-1COPY\s0 or \s-1INSERT\s0 to export the corresponding data. To allow that you
have to specify your views in the \s-1VIEW_AS_TABLE\s0 configuration option.
.PP
Then if Ora2Pg finds the view it will extract its schema (if TYPE=TABLE) into
a \s-1PG\s0 create table form, then it will extract the data (if TYPE=COPY or \s-1INSERT\s0)
following the view schema.
.PP
For example, with the following view:
.PP
.Vb 6
\&        CREATE OR REPLACE VIEW product_prices (category_id, product_count, low_price, high_price) AS
\&        SELECT  category_id, COUNT(*) as product_count,
\&            MIN(list_price) as low_price,
\&            MAX(list_price) as high_price
\&         FROM   product_information
\&        GROUP BY category_id;
.Ve
.PP
Setting \s-1VIEW_AS_TABLE\s0 to product_prices and using export type \s-1TABLE,\s0 will
force Ora2Pg to detect columns returned types and to generate a create table
statement:
.PP
.Vb 6
\&        CREATE TABLE product_prices (
\&                category_id bigint,
\&                product_count integer,
\&                low_price numeric,
\&                high_price numeric
\&        );
.Ve
.PP
Data will be loaded following the \s-1COPY\s0 or \s-1INSERT\s0 export type and the view
declaration.
.PP
You can use the \s-1ALLOW\s0 and \s-1EXCLUDE\s0 directive in addition to filter other
objects to export.
.SS "Export as Kettle transformation \s-1XML\s0 files"
.IX Subsection "Export as Kettle transformation XML files"
The \s-1KETTLE\s0 export type is useful if you want to use Penthalo Data Integrator
(Kettle) to import data to PostgreSQL. With this type of export Ora2Pg will
generate one \s-1XML\s0 Kettle transformation files (.ktr) per table and add a line
to manually execute the transformation in the output.sql file. For example:
.PP
.Vb 1
\&        ora2pg \-c ora2pg.conf \-t KETTLE \-j 12 \-a MYTABLE \-o load_mydata.sh
.Ve
.PP
will generate one file called '\s-1HR.MYTABLE\s0.ktr' and add a line to the output
file (load_mydata.sh):
.PP
.Vb 1
\&        #!/bin/sh
\&
\&        KETTLE_TEMPLATE_PATH=\*(Aq.\*(Aq
\&
\&        JAVAMAXMEM=4096 ./pan.sh \-file $KETTLE_TEMPLATE_PATH/HR.MYTABLE.ktr \-level Detailed
.Ve
.PP
The \-j 12 option will create a template with 12 processes to insert data into
PostgreSQL. It is also possible to specify the number of parallel queries used
to extract data from the Oracle with the \-J command line option as follow:
.PP
.Vb 1
\&        ora2pg \-c ora2pg.conf \-t KETTLE \-J 4 \-j 12 \-a EMPLOYEES \-o load_mydata.sh
.Ve
.PP
This is only possible if you have defined the technical key to used to split
the query between cores in the \s-1DEFINED_PKEY\s0 configuration directive. For example:
.PP
.Vb 1
\&        DEFINED_PK      EMPLOYEES:employee_id
.Ve
.PP
will force the number of Oracle connection copies to 4 and defined the \s-1SQL\s0 query
as follow in the Kettle \s-1XML\s0 transformation file:
.PP
.Vb 1
\&        <sql>SELECT * FROM HR.EMPLOYEES WHERE ABS(MOD(employee_id,${Internal.Step.Unique.Count}))=${Internal.Step.Unique.Number}</sql>
.Ve
.PP
The \s-1KETTLE\s0 export type requires that the Oracle and PostgreSQL \s-1DSN\s0 are defined.
You can also activate the \s-1TRUNCATE_TABLE\s0 directive to force a truncation of the
table before data import.
.PP
The \s-1KETTLE\s0 export type is an original work of Marc Cousin.
.SS "Migration cost assessment"
.IX Subsection "Migration cost assessment"
Estimating the cost of a migration process from Oracle to PostgreSQL is not easy. To
obtain a good assessment of this migration cost, Ora2Pg will inspect all database
objects, all functions and stored procedures to detect if there's still some objects
and \s-1PL/SQL\s0 code that can not be automatically converted by Ora2Pg.
.PP
Ora2Pg has a content analysis mode that inspect the Oracle database to generate a
text report on what the Oracle database contains and what can not be exported.
.PP
To activate the \*(L"analysis and report\*(R" mode, you have to use the export de type
\&\s-1SHOW_REPORT\s0 like in the following command:
.PP
.Vb 1
\&        ora2pg \-t SHOW_REPORT
.Ve
.PP
Here is a sample report obtained with this command:
.PP
.Vb 6
\&        \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&        Ora2Pg: Oracle Database Content Report
\&        \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&        Version Oracle Database 10g Enterprise Edition Release 10.2.0.1.0
\&        Schema  HR
\&        Size  880.00 MB
\&         
\&        \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&        Object  Number  Invalid Comments
\&        \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&        CLUSTER   2 0 Clusters are not supported and will not be exported.
\&        FUNCTION  40  0 Total size of function code: 81992.
\&        INDEX     435 0 232 index(es) are concerned by the export, others are automatically generated and will
\&                                        do so on PostgreSQL. 1 bitmap index(es). 230 b\-tree index(es). 1 reversed b\-tree index(es)
\&                                        Note that bitmap index(es) will be exported as b\-tree index(es) if any. Cluster, domain,
\&                                        bitmap join and IOT indexes will not be exported at all. Reverse indexes are not exported
\&                                        too, you may use a trigram\-based index (see pg_trgm) or a reverse() function based index
\&                                        and search. You may also use \*(Aqvarchar_pattern_ops\*(Aq, \*(Aqtext_pattern_ops\*(Aq or \*(Aqbpchar_pattern_ops\*(Aq
\&                                        operators in your indexes to improve search with the LIKE operator respectively into
\&                                        varchar, text or char columns.
\&        MATERIALIZED VIEW 1 0 All materialized view will be exported as snapshot materialized views, they
\&                                        are only updated when fully refreshed.
\&        PACKAGE BODY  2 1 Total size of package code: 20700.
\&        PROCEDURE 7 0 Total size of procedure code: 19198.
\&        SEQUENCE  160 0 Sequences are fully supported, but all call to sequence_name.NEXTVAL or sequence_name.CURRVAL
\&                                        will be transformed into NEXTVAL(\*(Aqsequence_name\*(Aq) or CURRVAL(\*(Aqsequence_name\*(Aq).
\&        TABLE     265 0 1 external table(s) will be exported as standard table. See EXTERNAL_TO_FDW configuration
\&                                        directive to export as file_fdw foreign tables or use COPY in your code if you just
\&                                        want to load data from external files. 2 binary columns. 4 unknown types.
\&        TABLE PARTITION 8 0 Partitions are exported using table inheritance and check constraint. 1 HASH partitions.
\&                                        2 LIST partitions. 6 RANGE partitions. Note that Hash partitions are not supported.
\&        TRIGGER   30  0 Total size of trigger code: 21677.
\&        TYPE      7 1 5 type(s) are concerned by the export, others are not supported. 2 Nested Tables.
\&                                        2 Object type. 1 Subtype. 1 Type Boby. 1 Type inherited. 1 Varrays. Note that Type
\&                                        inherited and Subtype are converted as table, type inheritance is not supported.
\&        TYPE BODY 0 3 Export of type with member method are not supported, they will not be exported.
\&        VIEW      7 0 Views are fully supported, but if you have updatable views you will need to use
\&                                        INSTEAD OF triggers.
\&        DATABASE LINK 1 0 Database links will not be exported. You may try the dblink perl contrib module or use
\&                                        the SQL/MED PostgreSQL features with the different Foreign Data Wrapper (FDW) extensions.
\&                                        
\&        Note: Invalid code will not be exported unless the EXPORT_INVALID configuration directive is activated.
.Ve
.PP
Once the database can be analysed, Ora2Pg, by his ability to convert \s-1SQL\s0 and \s-1PL/SQL\s0
code from Oracle syntax to PostgreSQL, can go further by estimating the code difficulties
and estimate the time necessary to operate a full database migration.
.PP
To estimate the migration cost in man-days, Ora2Pg allow you to use a configuration
directive called \s-1ESTIMATE_COST\s0 that you can also enabled at command line:
.PP
.Vb 1
\&        \-\-estimate_cost
.Ve
.PP
This feature can only be used with the \s-1SHOW_REPORT, FUNCTION, PROCEDURE, PACKAGE\s0
and \s-1QUERY\s0 export type.
.PP
.Vb 1
\&        ora2pg \-t SHOW_REPORT  \-\-estimate_cost
.Ve
.PP
The generated report is same as above but with a new 'Estimated cost' column as follow:
.PP
.Vb 6
\&        \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&        Ora2Pg: Oracle Database Content Report
\&        \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&        Version Oracle Database 10g Express Edition Release 10.2.0.1.0
\&        Schema  HR
\&        Size  890.00 MB
\&         
\&        \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&        Object  Number  Invalid Estimated cost  Comments
\&        \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&        DATABASE LINK  3 0 9 Database links will be exported as SQL/MED PostgreSQL\*(Aqs Foreign Data Wrapper (FDW) extensions
\&                                        using oracle_fdw.
\&        FUNCTION  2 0 7 Total size of function code: 369 bytes. HIGH_SALARY: 2, VALIDATE_SSN: 3.
\&        INDEX 21  0 11  11 index(es) are concerned by the export, others are automatically generated and will do so
\&                                        on PostgreSQL. 11 b\-tree index(es). Note that bitmap index(es) will be exported as b\-tree
\&                                        index(es) if any. Cluster, domain, bitmap join and IOT indexes will not be exported at all.
\&                                        Reverse indexes are not exported too, you may use a trigram\-based index (see pg_trgm) or a
\&                                        reverse() function based index and search. You may also use \*(Aqvarchar_pattern_ops\*(Aq, \*(Aqtext_pattern_ops\*(Aq
\&                                        or \*(Aqbpchar_pattern_ops\*(Aq operators in your indexes to improve search with the LIKE operator
\&                                        respectively into varchar, text or char columns.
\&        JOB 0 0 0 Job are not exported. You may set external cron job with them.
\&        MATERIALIZED VIEW 1 0 3 All materialized view will be exported as snapshot materialized views, they
\&                                                are only updated when fully refreshed.
\&        PACKAGE BODY  0 2 54  Total size of package code: 2487 bytes. Number of procedures and functions found
\&                                                inside those packages: 7. two_proc.get_table: 10, emp_mgmt.create_dept: 4,
\&                                                emp_mgmt.hire: 13, emp_mgmt.increase_comm: 4, emp_mgmt.increase_sal: 4,
\&                                                emp_mgmt.remove_dept: 3, emp_mgmt.remove_emp: 2.
\&        PROCEDURE 4 0 39  Total size of procedure code: 2436 bytes. TEST_COMMENTAIRE: 2, SECURE_DML: 3,
\&                                                PHD_GET_TABLE: 24, ADD_JOB_HISTORY: 6.
\&        SEQUENCE  3 0 0 Sequences are fully supported, but all call to sequence_name.NEXTVAL or sequence_name.CURRVAL
\&                                                will be transformed into NEXTVAL(\*(Aqsequence_name\*(Aq) or CURRVAL(\*(Aqsequence_name\*(Aq).
\&        SYNONYM   3 0 4 SYNONYMs will be exported as views. SYNONYMs do not exists with PostgreSQL but a common workaround
\&                                                is to use views or set the PostgreSQL search_path in your session to access
\&                                                object outside the current schema.
\&                                                user1.emp_details_view_v is an alias to hr.emp_details_view.
\&                                                user1.emp_table is an alias to hr.employees@other_server.
\&                                                user1.offices is an alias to hr.locations.
\&        TABLE 17  0 8.5 1 external table(s) will be exported as standard table. See EXTERNAL_TO_FDW configuration
\&                                        directive to export as file_fdw foreign tables or use COPY in your code if you just want to
\&                                        load data from external files. 2 binary columns. 4 unknown types.
\&        TRIGGER 1 1 4 Total size of trigger code: 123 bytes. UPDATE_JOB_HISTORY: 2.
\&        TYPE  7 1 5 5 type(s) are concerned by the export, others are not supported. 2 Nested Tables. 2 Object type.
\&                                        1 Subtype. 1 Type Boby. 1 Type inherited. 1 Varrays. Note that Type inherited and Subtype are
\&                                        converted as table, type inheritance is not supported.
\&        TYPE BODY 0 3 30  Export of type with member method are not supported, they will not be exported.
\&        VIEW  1 1 1 Views are fully supported, but if you have updatable views you will need to use INSTEAD OF triggers.
\&        \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&        Total 65  8 162.5 162.5 cost migration units means approximatively 2 man day(s).
.Ve
.PP
The last line shows the total estimated migration code in man-days following the
number of migration units estimated for each object. This migration unit represent
around five minutes for a PostgreSQL expert. If this is your first migration you can
get it higher with the configuration directive \s-1COST_UNIT_VALUE\s0 or the \-\-cost_unit_value
command line option:
.PP
.Vb 1
\&        ora2pg \-t SHOW_REPORT  \-\-estimate_cost \-\-cost_unit_value 10
.Ve
.PP
Ora2Pg is also able to give you a migration difficulty level assessment, here a sample:
.PP
Migration level: B\-5
.PP
.Vb 10
\&    Migration levels:
\&        A \- Migration that might be run automatically
\&        B \- Migration with code rewrite and a human\-days cost up to 10 days
\&        C \- Migration with code rewrite and a human\-days cost above 10 days
\&    Technical levels:
\&        1 = trivial: no stored functions and no triggers
\&        2 = easy: no stored functions but with triggers, no manual rewriting
\&        3 = simple: stored functions and/or triggers, no manual rewriting
\&        4 = manual: no stored functions but with triggers or views with code rewriting
\&        5 = difficult: stored functions and/or triggers with code rewriting
.Ve
.PP
This assessment consist in a letter A or B to specify if the migration needs
manual rewritting or not. And a number from 1 up to 5 to give you a technical
difficulty level. You have an additional option \-\-human_days_limit to specify
the number of human-days limit where the migration level should be set to C
to indicate that it need a huge amount of work and a full project managment
with migration support. Default is 10 human-days. You can use the configuration
directive \s-1HUMAN_DAYS_LIMIT\s0 to change this default value permanently.
.PP
This feature has been developped to help you or your boss to decide which
database to migrate first and the team that must be mobilized to operate
the migration.
.SS "Global Oracle and MySQL migraton assessment"
.IX Subsection "Global Oracle and MySQL migraton assessment"
Ora2Pg come with a script ora2pg_scanner that can be used when you have a huge
number of instances and schema to scan for migration assessment.
.PP
Usage: ora2pg_scanner \-l \s-1CSVFILE\s0 [\-o \s-1OUTDIR\s0]
.PP
.Vb 4
\&   \-l | \-\-list FILE : CSV file containing a list of database to scan with
\&                all requiered information. The first line of the file
\&                can contains the following header that describe the
\&                format that must be used:
\&
\&                "type","schema/database","dsn","user","password"
\&
\&   \-o | \-\-outdir DIR : (optional) by default all reports will be dumped to a
\&                directory named \*(Aqoutput\*(Aq, it will be created automatically.
\&                If you want to change the name of this directory, set the name
\&                at second argument.
\&
\&   \-t | \-\-test : just try all connection by retrieving the requiered schema
\&                 or database name. Useful to validate your CSV list file.
\&
\&   Here is a full example of a CSV database list file:
\&
\&        "type","schema/database","dsn","user","password"
\&        "MYSQL","sakila","dbi:mysql:host=192.168.1.10;database=sakila;port=3306","root","secret"
\&        "ORACLE","HR","dbi:Oracle:host=192.168.1.10;sid=XE;port=1521","system","manager"
\&
\&   The CSV field separator must be a comma.
.Ve
.PP
It will generate a \s-1CSV\s0 file with the assessment result, one line per schema or
database and a detailled \s-1HTML\s0 report for each database scanned.
.PP
Hint: Use the \-t | \-\-test option before to test all your connections in your
\&\s-1CSV\s0 file.
.SS "Migration assessment method"
.IX Subsection "Migration assessment method"
Migration unit scores given to each type of Oracle database object are defined in the
Perl library lib/Ora2Pg/PLSQL.pm in the \f(CW%OBJECT_SCORE\fR variable definition.
.PP
The number of \s-1PL/SQL\s0 lines associated to a migration unit is also defined in this file
in the \f(CW$SIZE_SCORE\fR variable value.
.PP
The number of migration units associated to each \s-1PL/SQL\s0 code difficulties can be found
in the same Perl library lib/Ora2Pg/PLSQL.pm in the hash \f(CW%UNCOVERED_SCORE\fR initialization.
.PP
This assessment method is a work in progress so I'm expecting feedbacks on migration
experiences to polish the scores/units attribued in those variables.
.SS "Improving indexes and constraints creation speed"
.IX Subsection "Improving indexes and constraints creation speed"
Using the \s-1LOAD\s0 export type and a file containing \s-1SQL\s0 orders to perform, it is
possible to dispatch those orders over multiple PostgreSQL connections. To be
able to use this feature, the \s-1PG_DSN, PG_USER\s0 and \s-1PG_PWD\s0 must be set. Then:
.PP
.Vb 1
\&        ora2pg \-t LOAD \-c config/ora2pg.conf \-i schema/tables/INDEXES_table.sql \-j 4
.Ve
.PP
will dispatch indexes creation over 4 simultaneous PostgreSQL connections.
.PP
This will considerably accelerate this part of the migration process with huge
data size.
.SS "Hints"
.IX Subsection "Hints"
Converting your queries with Oracle style outer join (+) syntax to \s-1ANSI\s0 standard \s-1SQL\s0 at
the Oracle side can save you lot of time for the migration. You can use \s-1TOAD\s0 Query Builder
can re-write these using the proper \s-1ANSI\s0 syntax, see: http://www.toadworld.com/products/toad\-for\-oracle/f/10/t/9518.aspx
.PP
There's also an alternative with \s-1SQL\s0 Developer Data Modeler, see
http://www.thatjeffsmith.com/archive/2012/01/sql\-developer\-data\-modeler\-quick\-tip\-use\-oracle\-join\-syntax\-or\-ansi/
.PP
Toad is also able to rewrite the native Oracle \s-1\fIDECODE\s0()\fR syntax into \s-1ANSI\s0
standard \s-1SQL CASE\s0 statement. You can find some slide about this in a
presentation given at PgConf.RU: http://ora2pg.darold.net/ora2pg_the_hard_way.pdf
.SS "Test the migration"
.IX Subsection "Test the migration"
The type of action called \s-1TEST\s0 allow you to check that all objects from Oracle
database have been created under PostgreSQL. Of course \s-1PG_DSN\s0 must be set to be
able to check PostgreSQL side. Note that this feature will respect the schema
name limitation if \s-1EXPORT_SCHEMA\s0 and \s-1SCHEMA\s0 or \s-1PG_SCHEMA\s0 are defined.
.PP
.Vb 1
\&        ora2pg \-t TEST \-c config/ora2pg.conf > migration_diff.txt
.Ve
.PP
Will create a file containing the report of all object and row count on both
side, Oracle and PostgreSQL, with an error section giving you the detail of
the differences for each kind of object. Here is a sample result:
.PP
.Vb 10
\&        [TEST ROWS COUNT]
\&        ORACLEDB:COUNTRIES:25
\&        POSTGRES:countries:25
\&        ORACLEDB:CUSTOMERS:6
\&        POSTGRES:customers:6
\&        ORACLEDB:DEPARTMENTS:27
\&        POSTGRES:departments:27
\&        ORACLEDB:EMPLOYEES:107
\&        POSTGRES:employees:107
\&        ORACLEDB:JOBS:19
\&        POSTGRES:jobs:19
\&        ORACLEDB:JOB_HISTORY:10
\&        POSTGRES:job_history:10
\&        ORACLEDB:LOCATIONS:23
\&        POSTGRES:locations:23
\&        ORACLEDB:PRODUCTS:0
\&        POSTGRES:products:0
\&        ORACLEDB:PTAB2:4
\&        ORACLEDB:REGIONS:4
\&        POSTGRES:regions:4
\&        [ERRORS ROWS COUNT]
\&        Table ptab2 does not exists in PostgreSQL database.
\&
\&        [TEST INDEXES COUNT]
\&        ORACLEDB:COUNTRIES:1
\&        POSTGRES:countries:1
\&        ORACLEDB:JOB_HISTORY:4
\&        POSTGRES:job_history:4
\&        ORACLEDB:DEPARTMENTS:2
\&        POSTGRES:departments:1
\&        ORACLEDB:EMPLOYEES:6
\&        POSTGRES:employees:6
\&        ORACLEDB:CUSTOMERS:1
\&        POSTGRES:customers:1
\&        ORACLEDB:REGIONS:1
\&        POSTGRES:regions:1
\&        ORACLEDB:LOCATIONS:4
\&        POSTGRES:locations:4
\&        ORACLEDB:JOBS:1
\&        POSTGRES:jobs:1
\&        [ERRORS INDEXES COUNT]
\&        Table departments doesn\*(Aqt have the same number of indexes in Oracle (2) and in PostgreSQL (1).
\&
\&        [TEST VIEW COUNT]
\&        ORACLEDB:VIEW:1
\&        POSTGRES:VIEW:1
\&        [ERRORS VIEW COUNT]
\&        OK, Oracle and PostgreSQL have the same number of VIEW.
\&
\&        [TEST MVIEW COUNT]
\&        ORACLEDB:MVIEW:0
\&        POSTGRES:MVIEW:0
\&        [ERRORS MVIEW COUNT]
\&        OK, Oracle and PostgreSQL have the same number of MVIEW.
\&
\&        [TEST SEQUENCE COUNT]
\&        ORACLEDB:SEQUENCE:1
\&        POSTGRES:SEQUENCE:0
\&        [ERRORS SEQUENCE COUNT]
\&        SEQUENCE does not have the same count in Oracle (1) and in PostgreSQL (0).
\&
\&        [TEST TYPE COUNT]
\&        ORACLEDB:TYPE:1
\&        POSTGRES:TYPE:0
\&        [ERRORS TYPE COUNT]
\&        TYPE does not have the same count in Oracle (1) and in PostgreSQL (0).
\&
\&        [TEST FDW COUNT]
\&        ORACLEDB:FDW:0
\&        POSTGRES:FDW:0
\&        [ERRORS FDW COUNT]
\&        OK, Oracle and PostgreSQL have the same number of FDW.
.Ve
.PP
Here we can see that one table, one index, one sequence and one user defined
type have not been imported yet or have encountered an error.
.SH "SUPPORT"
.IX Header "SUPPORT"
.SS "Author / Maintainer"
.IX Subsection "Author / Maintainer"
Gilles Darold <gilles \s-1AT\s0 darold \s-1DOT\s0 net>
.PP
Please report any bugs, patches, help, etc. to <gilles \s-1AT\s0 darold \s-1DOT\s0 net>.
.SS "Feature request"
.IX Subsection "Feature request"
If you need new features let me know at <gilles \s-1AT\s0 darold \s-1DOT\s0 net>. This help
a lot to develop a better/useful tool.
.SS "How to contribute ?"
.IX Subsection "How to contribute ?"
Any contribution to build a better tool is welcome, you just have to send me
your ideas, features request or patches and there will be applied.
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (c) 2000\-2016 Gilles Darold \- All rights reserved.
.PP
.Vb 4
\&        This program is free software: you can redistribute it and/or modify
\&        it under the terms of the GNU General Public License as published by
\&        the Free Software Foundation, either version 3 of the License, or
\&        any later version.
\&
\&        This program is distributed in the hope that it will be useful,
\&        but WITHOUT ANY WARRANTY; without even the implied warranty of
\&        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
\&        GNU General Public License for more details.
\&
\&        You should have received a copy of the GNU General Public License
\&        along with this program.  If not, see < http://www.gnu.org/licenses/ >.
.Ve
.SH "ACKNOWLEDGEMENT"
.IX Header "ACKNOWLEDGEMENT"
I must thanks a lot all the great contributors, see changelog for all acknowledgements.
